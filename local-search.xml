<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gin学习记录-中间件和路由</title>
    <link href="/2023/08/26/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E8%B7%AF%E7%94%B1/"/>
    <url>/2023/08/26/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/08/26/KnkYaivqlSDmMA8.png" alt="明日香"></p><h1 id="6-gin-中间件和路由"><a href="#6-gin-中间件和路由" class="headerlink" title="6. gin 中间件和路由"></a>6. gin 中间件和路由</h1><p>把请求的处理函数叫做中间件，且形参必须是<code>*gin.Context</code> 一个请求可以有多个中间件<br>通过Use()函数来调用中间件  </p><span id="more"></span><h2 id="6-1-单个路由和中间件"><a href="#6-1-单个路由和中间件" class="headerlink" title="6.1 单个路由和中间件"></a>6.1 单个路由和中间件</h2><ul><li><p>Next() 会将当前中间件前后分离，前面的为请求中间件，后面的为响应中间件<br>  执行完前面遇到Next()就执行下一个中间件，<strong>把响应中间件压入栈中（大概效果是这样）。</strong></p></li><li><p>Abort() 会拦截执行后面的中间件，但当前中间件后面的代码仍会执行完</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m1</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;m1 in&quot;</span>)  <br>    c.Next()  <br>    c.Abort() <span class="hljs-comment">// 此时Abort在Next后面，m1的剩余部分是最后一个被执行的，之后没有其他中间件  </span><br>    fmt.Println(<span class="hljs-string">&quot;m1 out&quot;</span>)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m2</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;m2 in&quot;</span>)  <br>    c.Next()  <br>    fmt.Println(<span class="hljs-string">&quot;m2 out&quot;</span>)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m3</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;m3 in&quot;</span>)  <br>    c.Next()  <br>    fmt.Println(<span class="hljs-string">&quot;m3 out&quot;</span>)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m4</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;m4 in&quot;</span>)  <br>    c.Next()  <br>    fmt.Println(<span class="hljs-string">&quot;m4 out&quot;</span>)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">m5</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;m5 in&quot;</span>)  <br>    c.Next()  <br>    fmt.Println(<span class="hljs-string">&quot;m5 out&quot;</span>)  <br>&#125;  <br>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    router := gin.Default()  <br> <br>    <span class="hljs-comment">// 单个中间件  </span><br>    router.GET(<span class="hljs-string">&quot;/single&quot;</span>, m1, m2, m3)  <br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    结果:</span><br><span class="hljs-comment">    m1 in  </span><br><span class="hljs-comment">    m2 in  </span><br><span class="hljs-comment">    m3 in  </span><br><span class="hljs-comment">    m3 out  </span><br><span class="hljs-comment">    m2 out  </span><br><span class="hljs-comment">    m1 out  </span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">// 使用全局中间件 不需要匹配路径，直接用  </span><br>    router.Use(m4, m5)  <br><br>    err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)  <br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><ul><li>通过中间件传递数据并接收 key-value</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;  <br>    Name <span class="hljs-type">string</span>  <br>    Age <span class="hljs-type">int</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">set</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    <span class="hljs-comment">// 设置kv  </span><br>    c.Set(<span class="hljs-string">&quot;note&quot;</span>, <span class="hljs-string">&quot;这是一条kv设置&quot;</span>)  <br><br>    <span class="hljs-comment">// 设置结构体数据  </span><br>    c.Set(<span class="hljs-string">&quot;user&quot;</span>, User&#123;  <br>        Name: <span class="hljs-string">&quot;kjasn&quot;</span>,  <br>        Age: <span class="hljs-number">11</span>,  <br>    &#125;)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    router := gin.Default()  <br><br>    <span class="hljs-comment">// 使用全局中间件 不需要匹配路径，直接用  </span><br>    router.Use(_set)  <br><br>    router.GET(<span class="hljs-string">&quot;/setVal&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>        <span class="hljs-comment">// 用Get()接收 形参是key 返回any类型的val和一个bool值表示是否存在key  </span><br>        <span class="hljs-comment">// 接收单独设置的kv  </span><br>        note, ok := c.Get(<span class="hljs-string">&quot;note&quot;</span>)  <br>        <span class="hljs-keyword">if</span> ok &#123;  <br>            fmt.Println(note)  <br>        &#125;  <br><br>    <span class="hljs-comment">////////////////////////////////////////////////////////////</span><br>        <span class="hljs-comment">// 接收结构体 kv  </span><br>        user, ok := c.Get(<span class="hljs-string">&quot;user&quot;</span>)  <br>        <span class="hljs-keyword">if</span> ok &#123;  <br>            <span class="hljs-comment">// 直接打印整个user  </span><br>            fmt.Println(user)  <br>            c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;data&quot;</span>: user&#125;)  <br><br>            <span class="hljs-comment">// 单独打印 需要断言为User类型才能访问User类型的属性  </span><br>            fmt.Println(<span class="hljs-string">&quot;断言&quot;</span>)  <br>            _user, ok := user.(User) <span class="hljs-comment">// 断言成功 _user 接收到user的类型，若失败则为空  </span><br>            <span class="hljs-keyword">if</span> ok &#123;  <br>                fmt.Println(<span class="hljs-string">&quot;姓名：&quot;</span>, _user.Name, <span class="hljs-string">&quot;年龄：&quot;</span>, _user.Age)  <br>                c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;name&quot;</span>: _user.Name, <span class="hljs-string">&quot;age&quot;</span>: _user.Age&#125;)  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                fmt.Println(<span class="hljs-string">&quot;断言失败，不是User类型&quot;</span>)  <br>            &#125;  <br>        &#125;  <br>    &#125;)  <br>    <br>    err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)  <br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        <span class="hljs-built_in">panic</span>(err)  <br>    &#125;  <br>&#125;  <br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">## 6.2 路由分组  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">将一系列的路由放到一个组下，统一管理，为分组路由定义全局中间件同单个路由定义全局中间件一样，用Use()函数  </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">- 定义一些需要的结构体  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><span class="hljs-keyword">go</span>  <br>  <br><span class="hljs-comment">// 封装响应格式  </span><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;  <br>    Code <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;code&quot;`</span>  <br>    Date any <span class="hljs-string">`json:&quot;date&quot;`</span>  <br>    Message <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;msg&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-keyword">type</span> UserInfo <span class="hljs-keyword">struct</span> &#123;  <br>    Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span>  <br>    Age <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;age&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-keyword">type</span> ArticleInfo <span class="hljs-keyword">struct</span> &#123;  <br>    Title <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;title&quot;`</span>  <br>    Content <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;content&quot;`</span>  <br>&#125;  <br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">- 定义中间件  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><span class="hljs-keyword">go</span>  <br><span class="hljs-comment">// 此处直接内定一些简单的数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DisplayUserList</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    list := []UserInfo&#123;  <br>        &#123;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">23</span>&#125;,  <br>        &#123;<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">45</span>&#125;,  <br>    &#125;  <br><br>    c.JSON(http.StatusOK, Response&#123;Code: <span class="hljs-number">1</span>, Date: list, Message: <span class="hljs-string">&quot;请求成功&quot;</span>&#125;)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DisplayArticle</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    list := []ArticleInfo &#123;  <br>        &#123;<span class="hljs-string">&quot;c语言入门到入土&quot;</span>, <span class="hljs-string">&quot;本书是c语言入门教程,面向入土&quot;</span>&#125;,  <br>        &#123;<span class="hljs-string">&quot;数据库从删库到跑路&quot;</span>, <span class="hljs-string">&quot;本书教你如何从删库到跑路&quot;</span>&#125;,  <br>    &#125;  <br><br>    c.JSON(http.StatusOK, Response&#123;Code: <span class="hljs-number">1</span>, Date: list, Message: <span class="hljs-string">&quot;请求成功&quot;</span>&#125;)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">showTest</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;showTest in &quot;</span>)  <br>    c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;这是一个用来测试的中间件&quot;</span>&#125;)  <br>&#125;  <br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">- 拆分出来，这样也方便单独成包  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><span class="hljs-keyword">go</span>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UserRouterInit</span><span class="hljs-params">(api *gin.RouterGroup)</span></span> &#123;  <br>    <span class="hljs-comment">// 用户管理分组 将userManagement作为api下的一个组 同一个组内的请求一般放在一个大括号里  </span><br>    <span class="hljs-comment">// 发出请求 http://127.0.0.1/api/user-management/user  </span><br>    userManagement := api.Group(<span class="hljs-string">&quot;user-management&quot;</span>) &#123;  <br>        <span class="hljs-comment">// 以下是userManagement分组下的一些请求  </span><br>        userManagement.GET(<span class="hljs-string">&quot;/user&quot;</span>, DisplayUserList)  <br>        <span class="hljs-comment">// ......</span><br>    &#125;  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ArticleRouterInit</span><span class="hljs-params">(api *gin.RouterGroup)</span></span> &#123;  <br>    <span class="hljs-comment">// 文章管理分组 将article-management作为api下的一个组 与userManagement并列  </span><br>    <span class="hljs-comment">// 发出请求 http://127.0.0.1/api/article-management/article  </span><br>    article := api.Group(<span class="hljs-string">&quot;article-management&quot;</span>) &#123;<br>        <span class="hljs-comment">// 以下是article-management分组下的一些请求，就像之前写的一样 此处简写  </span><br>        article.GET(<span class="hljs-string">&quot;/article&quot;</span>, DisplayArticle)  <br>        <span class="hljs-comment">// ..........</span><br>    &#125;  <br>&#125;  <br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test</span><span class="hljs-params">(api *gin.RouterGroup)</span></span> &#123;  <br>    <span class="hljs-comment">// 为test组注册showTest全局中间件，该组下的子组都会用到这个中间件  </span><br>    test := api.Group(<span class="hljs-string">&quot;test&quot;</span>).Use(showTest) &#123; <br>        test.GET(<span class="hljs-string">&quot;show1&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>            fmt.Println(<span class="hljs-string">&quot;in show1&quot;</span>)  <br>        &#125;)  <br>        test.GET(<span class="hljs-string">&quot;show2&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>            fmt.Println(<span class="hljs-string">&quot;in show2&quot;</span>)  <br>        &#125;)  <br>    &#125;  <br>&#125;  <br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">- 在main()中分组然后直接调用拆分出来的包即可  </span><br><span class="hljs-string">分组之后，请求当前组下的其他分组需要加上父组的路径作为前缀  </span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><span class="hljs-keyword">go</span>  <br><span class="hljs-comment">// 分组 </span><br>api := router.Group(<span class="hljs-string">&quot;api&quot;</span>) <span class="hljs-comment">// 返回一个组  </span><br>  <br>UserRouterInit(api)  <br>ArticleRouterInit(api)  <br>Test(api)<br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">## 6.3 讲讲gin.Default()和gin.New()  </span><br><span class="hljs-string">  </span><br><span class="hljs-string">- gin.New() 是创建一个新的**空白引擎**，没有添加任何中间件。而**gin.Default()中调用了gin.New()并添加两个中间件 gin.Logger(), gin.Recovery()，这是二者的主要区别。  **</span><br><span class="hljs-string">  </span><br><span class="hljs-string">- gin.Logger() : 记录请求日志：在每次请求到达服务器时，记录请求的信息，包括请求的方法（GET、POST 等）、请求的路径、请求的 IP 地址等。  </span><br><span class="hljs-string">- gin.Recovery() : 恢复从错误中恢复：在处理请求时，捕获潜在的异常，比如代码出现了意外的错误或崩溃。它会确保应用不会因为异常而完全崩溃，而是尽量将异常信息记录下来，并返回一个友好的错误响应给客户端 。</span><br><span class="hljs-string">  </span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><span class="hljs-keyword">go</span>  <br><span class="hljs-comment">// 以下就等同于用gin.Default()  </span><br>router := gin.New()  <br>router.Use(gin.Logger(), gin.Recovery())  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>gin</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>折腾日记 - openwrt 安装 docker 插件</title>
    <link href="/2023/08/20/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0-openwrt%E5%AE%89%E8%A3%85docker%E6%8F%92%E4%BB%B6/"/>
    <url>/2023/08/20/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0-openwrt%E5%AE%89%E8%A3%85docker%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><blockquote><p>搞了个 <code>openWrt</code> 虚拟机，想在里面跑些东西，已经安装了 <code>Docker</code>，但没有图形化界面，不方便用，所以就开始折腾了…</p></blockquote><span id="more"></span><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>我跟着<a href="https://www.bilibili.com/video/BV1xm4y1a7ke">B站视频</a>安装了 <code>openWrt</code>，然后安装 <code>Docker</code>图形界面插件，网上各种搜教程，看得头都晕了（我实在不会安装开发软件和配环境这一类的东西），我都全程问chatGPT，还是各种报错，进行不下去。前天晚上洗完澡，刚12点，感觉还挺早，我一想，在找找教程看怎么搞，然后等我注意到的时候就到了两点，最重要的是安装依赖还是报错😭。</p><h2 id="遇到的问题及解决方法"><a href="#遇到的问题及解决方法" class="headerlink" title="遇到的问题及解决方法"></a>遇到的问题及解决方法</h2><ul><li>问题</li></ul><ol><li><code>opkg update</code>报错</li><li>安装<code>Docker</code>插件失败</li><li>还有一些小问题，比如文件传输，<code>winSCP</code>无法连接到虚拟机…</li></ol><ul><li><p>解决<br>  先说说这些小问题吧。其实这些小问题是一个接着一个的，比如我不知道怎么把下好的安装包放到<code>openWrt</code>虚拟机中去，然后我就去找解决方法，用支持 <code>sftp</code> 协议的软件传，我下了<code>winSCP</code>，结果死活连不上<code>openWrt</code>，但能连上<code>ubuntu</code>，把报错内容告诉chatGPT，也没得到什么可行的方法。好多次都是遇到这样的小问题，而且一个接着一个。后来我发现，在图形界面中的系统菜单下有个上传文件的功能，太蠢了……<br>  然后，第一个问题，这个问题不解决，后面一直进行不下去，我也是一直卡在这里，然后我看到说是镜像源的问题，那些源仓库的链接复制到浏览器已经打不开了，所以得换源。然后又在B站找到个<a href="https://www.bilibili.com/video/av970595502">视频</a>，我为什么没有早一点发现啊😭，这个手把手教会了我换源，下载<code>Docker</code>插件，安装插件，最后就解决了所有问题。</p></li><li><p>以下是这些依赖和插件，打包放在这里了：<br><a href="https://wwnf.lanzouw.com/b03epekzc">https://wwnf.lanzouw.com/b03epekzc</a><br>密码:9xv7</p></li></ul><p>大概就这些了，也没别的，吐槽一下自己有多蠢就是了。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p>唉，我只是为了薅微软羊毛所以用 <code>openWrt</code>来刷东西，折腾了这么久，真不容易😵</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
      <tag>openWrt</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gin学习记录-bind参数绑定</title>
    <link href="/2023/08/16/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-bind%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/"/>
    <url>/2023/08/16/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-bind%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="4-bind-绑定参数"><a href="#4-bind-绑定参数" class="headerlink" title="4. bind 绑定参数"></a>4. bind 绑定参数</h1><p>gin 中的 bind 可以很方便的将前端传递来的数据与结构体进行参数绑定，以及参数校验 。</p><span id="more"></span><h2 id="4-1-参数绑定"><a href="#4-1-参数绑定" class="headerlink" title="4.1 参数绑定"></a>4.1 参数绑定</h2><p>在使用这个功能的时候，需要给结构体加上<code>Tag ：json，form，url  </code></p><p>两种绑定方式：  </p><ul><li>MustBind 实际开发不用，校验失败会改状态码  </li><li>ShouldBind 可以绑定<code>json, query, param, yaml, xml</code>，如果校验不通过会返回错误</li></ul><h3 id="绑定post参数-ShouldBindJSON"><a href="#绑定post参数-ShouldBindJSON" class="headerlink" title="绑定post参数 ShouldBindJSON"></a>绑定post参数 ShouldBindJSON</h3><p>tag 为 : <code>json  </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserInfo <span class="hljs-keyword">struct</span> &#123;  <br>    Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span>  <br>    Age <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;age&quot;`</span>  <br>    Gender <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;gender&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    router := gin.Default()  <br><br>    <span class="hljs-comment">// 绑定post参数  </span><br>    <span class="hljs-comment">/* 发送到数据：  </span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">        &quot;name&quot;: &quot;aaa&quot;,  </span><br><span class="hljs-comment">        &quot;age&quot;: 33,  </span><br><span class="hljs-comment">        &quot;gender&quot;: &quot;male&quot;  </span><br><span class="hljs-comment">    &#125;  </span><br><span class="hljs-comment">    */</span>  <br>    router.POST(<span class="hljs-string">&quot;/bind-post&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;  <br>        <span class="hljs-keyword">var</span> userInfo UserInfo  <br><br>        <span class="hljs-comment">// 将请求中体json数据绑定到userInfo 上  </span><br>        err := arg.ShouldBindJSON(&amp;userInfo)  <br><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>            arg.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定失败&quot;</span>&#125;)  <br>            fmt.Println(err)  <br>            <span class="hljs-keyword">return</span>  <br>        &#125;  <br>        arg.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;data&quot;</span>: userInfo, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定成功&quot;</span>&#125;)  <br>    &#125;)  <br>    <span class="hljs-comment">/* 返回结果：  </span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">    &quot;data&quot;: &#123;  </span><br><span class="hljs-comment">            &quot;name&quot;: &quot;aaa&quot;,  </span><br><span class="hljs-comment">            &quot;age&quot;: 33,  </span><br><span class="hljs-comment">            &quot;gender&quot;: &quot;male&quot;  </span><br><span class="hljs-comment">        &#125;,  </span><br><span class="hljs-comment">        &quot;msg&quot;: &quot;绑定成功&quot;  </span><br><span class="hljs-comment">    &#125;  </span><br><span class="hljs-comment">    */</span>  <br><br>    err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        <span class="hljs-keyword">return</span>  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="4-2-绑定query参数-ShouldBindQuery"><a href="#4-2-绑定query参数-ShouldBindQuery" class="headerlink" title="4.2 绑定query参数 ShouldBindQuery"></a>4.2 绑定query参数 ShouldBindQuery</h2><p>tag 为 : <code>form </code></p><p>form是用来绑定 POST 请求体中的查询参数，这里不能用query，query是用来绑定 GET 请求中的查询参数  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserInfo <span class="hljs-keyword">struct</span> &#123;  <br>    Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; form:&quot;name&quot;`</span>  <br>    Age <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;age&quot; form:&quot;age&quot;`</span>  <br>    Gender <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;gender&quot; form:&quot;gender&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    router := gin.Default()  <br><br>    <span class="hljs-comment">// 绑定query参数  </span><br>    <span class="hljs-comment">// 输入的请求为： http://127.0.0.1/bind-query?name=kjasn&amp;age=54&amp;gender=male  </span><br>    router.POST(<span class="hljs-string">&quot;/bind-query&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;  <br>        <span class="hljs-keyword">var</span> userInfo UserInfo  <br><br>        <span class="hljs-comment">// 将请求中的json数据绑定到userInfo 上  </span><br>        err := arg.ShouldBindQuery(&amp;userInfo)  <br><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>            arg.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定失败&quot;</span>&#125;)  <br>            fmt.Println(err)  <br>            <span class="hljs-keyword">return</span>  <br>        &#125;  <br>        arg.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind-query&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>: userInfo, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定成功&quot;</span>&#125;)  <br>    &#125;)  <br>    <span class="hljs-comment">/* 结果如下：  </span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">        &quot;data&quot;: &#123;  </span><br><span class="hljs-comment">            &quot;name&quot;: &quot;kjasn&quot;,  </span><br><span class="hljs-comment">            &quot;age&quot;: 54,  </span><br><span class="hljs-comment">            &quot;gender&quot;: &quot;male&quot;  </span><br><span class="hljs-comment">        &#125;,  </span><br><span class="hljs-comment">        &quot;msg&quot;: &quot;绑定成功&quot;,  </span><br><span class="hljs-comment">        &quot;type&quot;: &quot;bind-query&quot;  </span><br><span class="hljs-comment">    &#125; */</span><br><br>    err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        <span class="hljs-keyword">return</span>  <br>    &#125;  <br>&#125;  <br>  <br></code></pre></td></tr></table></figure><h2 id="4-3-绑定动态参数-ShouldBindUri"><a href="#4-3-绑定动态参数-ShouldBindUri" class="headerlink" title="4.3 绑定动态参数 ShouldBindUri"></a>4.3 绑定动态参数 ShouldBindUri</h2><p>tag 为 : <code>uri  </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> UserInfo <span class="hljs-keyword">struct</span> &#123;  <br>    <span class="hljs-comment">// 后面加的是tag uri是用来绑定POST 请求中的url的参数  </span><br>    Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; form:&quot;name&quot; uri:&quot;name&quot; `</span>  <br>    Age <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;age&quot; form:&quot;age&quot; uri:&quot;age&quot;`</span>  <br>    Gender <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;gender&quot; form:&quot;gender&quot; uri:&quot;gender&quot;`</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>router := gin.Default()  <br>  <br><span class="hljs-comment">// 绑定动态参数 从url中获取参数  </span><br><span class="hljs-comment">// 输入的请求为：http://127.0.0.1/bind-uri/qqq/12/female  </span><br>router.POST(<span class="hljs-string">&quot;/bind-uri/:name/:age/:gender&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> userInfo UserInfo  <br><br>    <span class="hljs-comment">// 将请求中的url的数据绑定到userInfo 上  </span><br>    err := arg.ShouldBindUri(&amp;userInfo)  <br><br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        arg.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定失败&quot;</span>&#125;)  <br>        fmt.Println(err)  <br>            <span class="hljs-keyword">return</span>  <br>        &#125;  <br>        arg.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;data&quot;</span>: userInfo, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定成功&quot;</span>&#125;)  <br>    &#125;)  <br>    <span class="hljs-comment">/*  </span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">        &quot;data&quot;: &#123;  </span><br><span class="hljs-comment">            &quot;name&quot;: &quot;qqq&quot;,  </span><br><span class="hljs-comment">            &quot;age&quot;: 12,  </span><br><span class="hljs-comment">            &quot;gender&quot;: &quot;female&quot;  </span><br><span class="hljs-comment">        &#125;,  </span><br><span class="hljs-comment">        &quot;msg&quot;: &quot;绑定成功&quot;  </span><br><span class="hljs-comment">    &#125;  </span><br><span class="hljs-comment">    */</span>  <br><br>    err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        <span class="hljs-keyword">return</span>  <br>    &#125;  <br>&#125;  <br>  <br></code></pre></td></tr></table></figure><h2 id="4-4-ShouldBind"><a href="#4-4-ShouldBind" class="headerlink" title="4.4 ShouldBind"></a>4.4 ShouldBind</h2><p><strong>会根据请求头中的 content-type 去自动绑定</strong><br>默认tag 为 <code>form  </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go">router.POST(<span class="hljs-string">&quot;/bind-form&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;  <br>    <span class="hljs-keyword">var</span> userInfo UserInfo  <br><br>    <span class="hljs-comment">// 请求1： http://127.0.0.1/bind-form?name=lkh&amp;age=77&amp;gender=secret （虽然是post,但也能绑定get请求）  </span><br>    <span class="hljs-comment">/* 请求2： (json格式) 也可以请求form-data等类型  </span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">        &quot;name&quot;: &quot;aaa&quot;,  </span><br><span class="hljs-comment">        &quot;age&quot;: 33,  </span><br><span class="hljs-comment">        &quot;gender&quot;: &quot;男&quot;  </span><br><span class="hljs-comment">    &#125;  </span><br><span class="hljs-comment">    */</span>  <br><br>    err := arg.ShouldBind(&amp;userInfo)  <br><br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        arg.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定失败&quot;</span>&#125;)  <br>        fmt.Println(err)  <br>            <span class="hljs-keyword">return</span>  <br>    &#125;  <br>    arg.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;data&quot;</span>: userInfo, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定成功&quot;</span>&#125;)  <br>    <span class="hljs-comment">/*  </span><br><span class="hljs-comment">    // 请求1的结果  </span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">        &quot;data&quot;: &#123;  </span><br><span class="hljs-comment">            &quot;name&quot;: &quot;lkh&quot;,  </span><br><span class="hljs-comment">            &quot;age&quot;: 77,  </span><br><span class="hljs-comment">            &quot;gender&quot;: &quot;secret&quot;  </span><br><span class="hljs-comment">        &#125;,  </span><br><span class="hljs-comment">        &quot;msg&quot;: &quot;绑定成功&quot;,  </span><br><span class="hljs-comment">        &quot;type&quot;: &quot;&quot; // get请求没有的请求体 Content-Type字段  </span><br><span class="hljs-comment">    &#125;  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    // 请求2的结果  </span><br><span class="hljs-comment">    &#123;  </span><br><span class="hljs-comment">    &quot;data&quot;: &#123;  </span><br><span class="hljs-comment">            &quot;name&quot;: &quot;aaa&quot;,  </span><br><span class="hljs-comment">            &quot;age&quot;: 33,  </span><br><span class="hljs-comment">            &quot;gender&quot;: &quot;男&quot;  </span><br><span class="hljs-comment">        &#125;,  </span><br><span class="hljs-comment">        &quot;msg&quot;: &quot;绑定成功&quot;,  </span><br><span class="hljs-comment">        &quot;type&quot;: &quot;application/json&quot; // 类型  </span><br><span class="hljs-comment">    &#125;  </span><br><span class="hljs-comment">    */</span>  <br>&#125;)  <br>  <br></code></pre></td></tr></table></figure><h2 id="4-5-bind-绑定器"><a href="#4-5-bind-绑定器" class="headerlink" title="4.5 bind 绑定器"></a>4.5 bind 绑定器</h2><p>需要使用参数验证功能，需要加 binding tag  </p><h3 id="常用验证器"><a href="#常用验证器" class="headerlink" title="常用验证器"></a>常用验证器</h3><p>验证器和值之间不能有空格！！！,同一个字段多个验证规则用’,’隔开<br><code>eg: binding:&quot;min = 5&quot; // error!!! </code>  </p><ul><li><p>不能为空，并且不能没有这个字段<br>required: 必填字段,如: <code>binding:&quot;required&quot;</code>  </p></li><li><p>针对字符串的长度<br>min 最小长度，如：<code>binding:&quot;min=5&quot;</code><br>max 最大长度，如：<code>binding:&quot;max=10&quot;</code><br>len 长度，如：<code>binding:&quot;len=6&quot;</code>  </p></li><li><p>针对数字的大小<br>eq 等于，如：<code>binding:&quot;eq=3&quot;</code><br>ne 不等于，如：<code>binding:&quot;ne=12&quot;</code><br>gt 大于,如: <code>binding:&quot;gt=10&quot;</code><br>gte 大于等于,如:<code> binding:&quot;gte=10&quot;</code><br>lt 小于，如：<code>binding:&quot;lt=10&quot;</code><br>lte 小于等于，如：<code>binding:&quot;lte=10&quot;</code><br>eqfield 等于其他字段的值，如：<code>binding:&quot;eqfield=ConfirmPassword&quot;</code><br>nefield 不等于其他字段的值<br>忽略字段，如：<code>binding:&quot;-&quot;</code></p></li></ul><h3 id="gin-内置验证器"><a href="#gin-内置验证器" class="headerlink" title="gin 内置验证器"></a>gin 内置验证器</h3><h4 id="枚举验证器-oneof"><a href="#枚举验证器-oneof" class="headerlink" title="枚举验证器 oneof"></a>枚举验证器 oneof</h4><p>要求当前字段的值必须是 oneof 中的一个，oneof的值用空格隔开，常用与性别检验  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 以下是结构体中的一个字段  </span><br>Gender <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;gender&quot; binding:&quot;oneof=男 女&quot;`</span> <span class="hljs-comment">// 性别  </span><br></code></pre></td></tr></table></figure><h4 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h4><p>contains&#x3D;arg 包含arg的字符<br>excludes&#x3D;arg 不包含arg<br>startswith&#x3D;arg 以arg开头<br>endswith&#x3D;arg 以arg结尾<br>dive 用来对数组或切片中的每个元素进行单独的验证  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// name字段  </span><br>Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; binding:&quot;required,endswith=f&quot;`</span> <span class="hljs-comment">// 用户名  </span><br>  <br><span class="hljs-comment">// 1. 验证切片中的元素不能为空：  </span><br>Data []<span class="hljs-type">string</span> <span class="hljs-string">`binding:&quot;dive,required&quot;`</span>  <br>  <br><span class="hljs-comment">// 2. 验证切片中的元素的长度不能超过10：  </span><br>Data []<span class="hljs-type">string</span> <span class="hljs-string">`binding:&quot;dive,max=10&quot;`</span>  <br>  <br><span class="hljs-comment">// 3. 验证切片中的元素必须为数字：  </span><br>Data []<span class="hljs-type">string</span> <span class="hljs-string">`binding:&quot;dive,number&quot;`</span>  <br></code></pre></td></tr></table></figure><h3 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h3><p>内置的验证器往往不够用，需要自定义验证器，如下自定义一个校验姓名是否重复的验证器  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  <br>  <br><span class="hljs-keyword">import</span> (  <br>    <span class="hljs-string">&quot;fmt&quot;</span>  <br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>  <br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin/binding&quot;</span>  <br>    <span class="hljs-string">&quot;github.com/go-playground/validator/v10&quot;</span>  <br>    <span class="hljs-string">&quot;net/http&quot;</span>  <br>    <span class="hljs-string">&quot;reflect&quot;</span>  <br>)  <br>  <br><span class="hljs-keyword">type</span> SignUserInfo <span class="hljs-keyword">struct</span> &#123;  <br>    <span class="hljs-comment">// 添加验证器 常用的 此处 uniqueName是一个自定义的验证器  </span><br>    Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; binding:&quot;required,uniqueName&quot; msg:&quot;昵称不能为空也不能重复&quot;`</span> <span class="hljs-comment">// 用户名  </span><br>    Age <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;age&quot; binding:&quot;lt=100,gt=0&quot; msg:&quot;年龄不符合要求&quot;`</span> <span class="hljs-comment">// 年龄  </span><br>&#125;  <br>  <br><span class="hljs-comment">// 简单写，直接用一个字符串数组 实际开发需要存储用户信息的数据库然后到数据库中查找昵称是否重复  </span><br><span class="hljs-keyword">var</span> nameList = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">GetValidMsg</span><span class="hljs-params">(err <span class="hljs-type">error</span>, user SignUserInfo)</span></span> <span class="hljs-type">string</span> &#123;  <br>    <span class="hljs-comment">// 将err接口断言为具体类型  </span><br>    <span class="hljs-keyword">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;  <br>        getObj := reflect.TypeOf(&amp;user)  <br>        fmt.Println(<span class="hljs-string">&quot;类型为：&quot;</span>, getObj)  <br><br>        <span class="hljs-comment">// 断言成功  </span><br>        <span class="hljs-keyword">for</span> _, e := <span class="hljs-keyword">range</span> errs &#123; <span class="hljs-comment">// 遍历每一个错误信息 报错信息可能有多个  </span><br>            <span class="hljs-comment">// 根据报错字段名，获取结构体的具体字段  </span><br>            <span class="hljs-keyword">if</span> f, exits := getObj.Elem().FieldByName(e.Field()); exits &#123;  <br>                msg := f.Tag.Get(<span class="hljs-string">&quot;msg&quot;</span>)  <br>                fmt.Println(msg)  <br>                    <span class="hljs-keyword">return</span> msg  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 没有检查到验证器错误则返回空  </span><br>&#125;  <br>  <br><span class="hljs-comment">// 函数原型为 func(fl FieldLevel) bool  </span><br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">nameCheck</span><span class="hljs-params">(fl validator.FieldLevel)</span></span> <span class="hljs-type">bool</span> &#123;  <br>    <span class="hljs-comment">// 遍历用户信息列表 实际应到数据库中查询，这里只是简单模拟  </span><br>    <span class="hljs-keyword">for</span> _, nameStr := <span class="hljs-keyword">range</span> nameList &#123;  <br>        <span class="hljs-comment">// 断言  </span><br>        name := fl.Field().Interface().(<span class="hljs-type">string</span>)  <br><br>        <span class="hljs-keyword">if</span> nameStr == name &#123;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    router := gin.Default()  <br><br>    <span class="hljs-keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;  <br>        <span class="hljs-comment">// 注册uniqueName验证器，其自定义验证功能通过_nameCheck函数来实现  </span><br>        err := v.RegisterValidation(<span class="hljs-string">&quot;uniqueName&quot;</span>, _nameCheck)  <br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>            <span class="hljs-keyword">return</span>  <br>        &#125;  <br>    &#125;  <br>  <br>    router.POST(<span class="hljs-string">&quot;/custom-check&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <br>        fmt.Println(<span class="hljs-string">&quot;访问...&quot;</span>)  <br>        <span class="hljs-keyword">var</span> user SignUserInfo  <br>        err := c.ShouldBindJSON(&amp;user) <span class="hljs-comment">// 返回error信息，不报错则返回空  </span><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>            customErr := _GetValidMsg(err, user)  <br>            c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: customErr&#125;)  <br>            <span class="hljs-keyword">return</span>  <br>        &#125;  <br><br>        c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;data&quot;</span>: user&#125;)  <br>    &#125;)  <br><br>    err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)  <br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <br>        <span class="hljs-keyword">return</span>  <br>    &#125;  <br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>gin</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cpp-re</title>
    <link href="/2023/08/07/cpp-re/"/>
    <url>/2023/08/07/cpp-re/</url>
    
    <content type="html"><![CDATA[<hr><p>这里不许看！😡</p><span id="more"></span><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//作用：给变量起别名    语法: 数据类型 &amp;别名 = 原名   引用就像指针一样，赋值时不会再复制一份值，而是直接kao&#x27;bei</span><br><span class="hljs-comment">//eg: int a=10;  int &amp;num = a; 引用的数据类型要与原数据类型一样  </span><br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; p1 = a;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a= &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//10</span><br>cout &lt;&lt; <span class="hljs-string">&quot;p1= &quot;</span> &lt;&lt; p1 &lt;&lt; endl; <span class="hljs-comment">//10</span><br><br>p1 = <span class="hljs-number">20</span>;<span class="hljs-comment">//通过引用修改变量的值</span><br><span class="hljs-comment">//输出结果 a和p1的值一样 </span><br>cout &lt;&lt; <span class="hljs-string">&quot;a= &quot;</span> &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">//20</span><br>cout &lt;&lt; <span class="hljs-string">&quot;p1= &quot;</span> &lt;&lt; p1 &lt;&lt; endl; <span class="hljs-comment">//20</span><br><br><span class="hljs-comment">//地址相同</span><br>cout &lt;&lt; (<span class="hljs-type">int</span>)&amp;a &lt;&lt; endl;<br>cout &lt;&lt; (<span class="hljs-type">int</span>)&amp;p1 &lt;&lt; endl;<br><span class="hljs-comment">//说明 a与p1 是同一个变量，地址相同（指向同一块内存），值相同，对其中任意一个进行操作都会相应的影响另一个</span><br><br><span class="hljs-comment">//注意： </span><br><span class="hljs-comment">//1.引用必须要初始化！！！</span><br>    <span class="hljs-comment">//2.引用初始化后无法改变</span><br>    <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>;<br>    <span class="hljs-comment">//int&amp; c;  //err 未初始化</span><br>    <span class="hljs-type">int</span>&amp; c=a;<span class="hljs-comment">//初始化</span><br>    c=b; <span class="hljs-comment">//这只是赋值而不是改变引用</span><br>    <br>    <br><span class="hljs-comment">/////////////////////////////////////////////</span><br><span class="hljs-comment">//用引用作为函数实参</span><br><br><span class="hljs-comment">//交换两数值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myswap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;a,<span class="hljs-type">int</span>&amp;b)</span><span class="hljs-comment">//相当于将形参作为传递的实参的引用，因此通过操作形参可以修改实参</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> tmp=a;a=b;b=tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,y=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">myswap</span>(x,y);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/////////////////////////////////////////////////</span><br><span class="hljs-comment">//用引用作为函数的返回值</span><br><span class="hljs-comment">//1、不要返回局部变量的引用,因为函数结束变量就销毁了</span><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test01</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回变量a的引用</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//int a = 10://局部变量存放在栈区</span><br><span class="hljs-comment">//return a;</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> b=<span class="hljs-number">10</span>;<span class="hljs-comment">//静态变量在堆区</span><br><span class="hljs-keyword">return</span> b;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span>&amp; ret=<span class="hljs-built_in">test01</span>();<br>cout&lt;&lt;<span class="hljs-string">&quot;ret=&quot;</span>&lt;&lt;ret&lt;&lt;endl;<span class="hljs-comment">//10</span><br><br><span class="hljs-comment">//2.引用作为函数的返回值时，函数调用也可作为左值</span><br><span class="hljs-built_in">test01</span>()=<span class="hljs-number">20</span>; <span class="hljs-comment">//test01()返回的是变量的引用，然后对其进行赋值操作就相当于对接受该引用的ret进行赋值操作</span><br>cout&lt;&lt;<span class="hljs-string">&quot;ret=&quot;</span>&lt;&lt;ret&lt;&lt;endl;<span class="hljs-comment">//20</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">///////////////////////////////////////</span><br><span class="hljs-comment">//3.引用的本质--- 创建引用时就是指针常量，使用引用时就是解引用操作  这些都由编译器自动完成</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a)</span></span><br><span class="hljs-function"></span>&#123;<br>a=<span class="hljs-number">100</span>;<span class="hljs-comment">//自动转换为 *a=100 ;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; a=n;<span class="hljs-comment">//自动转换为 int* const a=&amp;n; 指针常量的指向不可更改（这也说明了为什么引用不可更改）</span><br>a=<span class="hljs-number">20</span>;<span class="hljs-comment">//发现是引用的赋值操作，转换为 *a=20;</span><br><span class="hljs-built_in">func</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//4.常量引用  --- 用来修饰形参，防止误操作更改了变量的值////////////</span><br><br><span class="hljs-comment">// int&amp; b=10; err ,引用必须引一块合法的内存空间</span><br><span class="hljs-comment">//加上const后，编译器将代码修改为 int tmp=10;const int&amp; b=tmp;</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; b=<span class="hljs-number">10</span>;<span class="hljs-comment">//其实是引用了一块没有原名的空间，原名由编译器随机取，我们直接用引用对这块空间进行操作就行，由于是常量引用之后就不能再更改了 如 b=20;err</span><br><br><br><br><span class="hljs-comment">//修饰形参，防止误操作更改了变量的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show1</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; val)</span></span><br><span class="hljs-function"></span>&#123;<br>val=<span class="hljs-number">2</span>;<span class="hljs-comment">//此处修改了val,main函数中的a也会被修改，可能导致误操作</span><br>cout&lt;&lt;<span class="hljs-string">&quot;val= &quot;</span>&lt;&lt;val&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; val)</span><span class="hljs-comment">//使用常量引用</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// val=3;err 报错，提示不能修改，可防止误操作 </span><br>cout&lt;&lt;<span class="hljs-string">&quot;val= &quot;</span>&lt;&lt;val&lt;&lt;endl;<span class="hljs-comment">//2</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">show1</span>(a);<span class="hljs-comment">//2,show1函数改变了a的值</span><br><span class="hljs-built_in">show2</span>(a);<span class="hljs-comment">//2</span><br>cout&lt;&lt;<span class="hljs-string">&quot;a= &quot;</span>&lt;&lt;a&lt;&lt;endl;<span class="hljs-comment">//2</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3.函数提高"></a>3.函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-comment">//在C++中，函数的形参列表中的形参是可以有默认值的。   语法:返回值类型 函数名(参数=默认值)&#123;&#125;</span><br><br><br><span class="hljs-comment">//1、如果某个位置已经有了默认参数,那么从这个位置往后,从左到右都必须有默认值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b=<span class="hljs-number">2</span>,<span class="hljs-type">int</span> c=<span class="hljs-number">3</span>)</span></span>&#123;<span class="hljs-comment">//b有了默认值，其后所有形参就都要有</span><br><span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-built_in">sum</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)&lt;&lt;endl;<span class="hljs-comment">//14</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//2、声明和实现只能有一个有默认参数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b= <span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//声明</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-built_in">sum2</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)&lt;&lt;endl;<span class="hljs-comment">//8</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum2</span><span class="hljs-params">(<span class="hljs-type">int</span> a=<span class="hljs-number">10</span>,<span class="hljs-type">int</span> b=<span class="hljs-number">10</span>)</span></span>&#123;<span class="hljs-comment">//err 默认参数重定义</span><br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-函数重载"><a href="#3-2-函数重载" class="headerlink" title="3.2 函数重载"></a>3.2 函数重载</h3><h4 id="3-2-1-重载的基本语法"><a href="#3-2-1-重载的基本语法" class="headerlink" title="3.2.1  重载的基本语法"></a>3.2.1  重载的基本语法</h4><p>作用:让函数名可以相同,提高复用性</p><p>函数重载需满足的条件：&#x3D;&#x3D;同一个作用域下,函数名称相同,函数参数类型不同 或者 个数不同 或者 顺序不同&#x3D;&#x3D;</p><p>&#x3D;&#x3D;注意：只有返回值不同不可以作为函数重载的条件，因为无法仅按返回类型区分函数&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-comment">//构建函数重载</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;void func()的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">////////////////error/////////////</span><br><span class="hljs-comment">//int func()&#123;   //不能跟上面的func构成重载</span><br><span class="hljs-comment">//cout&lt;&lt;&quot;int func()的调用&quot;&lt;&lt;endl;</span><br><span class="hljs-comment">//  return 1;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//////////////////////////////////</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;func(int a)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> b)</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;func(double b)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> b)</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;func(int a,double b)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;func(double a,int b)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//调用，测试</span><br><span class="hljs-built_in">func</span>();<br><span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5.1</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.6</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-2-2-函数重载注意事项"><a href="#3-2-2-函数重载注意事项" class="headerlink" title="3.2.2 函数重载注意事项"></a>3.2.2 函数重载注意事项</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1,引用也可作为重载的条件</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a)</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;func(int&amp; a)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; a)</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;func(const int&amp; a)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">func</span>(n);<span class="hljs-comment">//第一个</span><br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//第二个</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//2.碰到默认参数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;func(int a)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b=<span class="hljs-number">2</span>)</span></span>&#123; <span class="hljs-comment">//含有默认参数</span><br>cout&lt;&lt;<span class="hljs-string">&quot;func(int a,int b=2)的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-comment">//以上两个重载函数实例可以同时存在，但是调用时可能出现问题</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//func(10); //err 这样既可调用1又可调用2，出现二义性</span><br><span class="hljs-built_in">func</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//这样调用没有问题，调用了第二个  （无法调用出第一个函数）</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4.类和对象"></a>4.类和对象</h2><p>类 –  包含 属性，行为，（属性和行为都叫 成员）</p><h3 id="4-1封装"><a href="#4-1封装" class="headerlink" title="4.1封装"></a>4.1封装</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.14</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span><br>&#123;<br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">//访问权限  public表示公共权限</span><br><br><span class="hljs-comment">//属性   如：半径</span><br><span class="hljs-type">int</span> r;<br><span class="hljs-comment">//行为  如：求周长</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calculate_C</span><span class="hljs-params">(<span class="hljs-type">int</span> c_r)</span></span>&#123;<br>r=c_r;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*PI*r;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Circle c1;<span class="hljs-comment">//通过上面的Circle类来创建对象(也叫实例化)</span><br><span class="hljs-comment">//c1.r=10;//给圆对象 的属性进行赋值</span><br>cout&lt;&lt;<span class="hljs-string">&quot;圆的周长为 &quot;</span>&lt;&lt;c1.<span class="hljs-built_in">calculate_C</span>(<span class="hljs-number">10</span>)&lt;&lt;endl; <span class="hljs-comment">//调用calculate_c</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">///////////////////////////////////////////</span><br>封装意义二：类在设计时，可以把属性和行为放在不同的权限下，加以控制。<br><br>访问权限有三种:<br><br>公共权限 <span class="hljs-keyword">public</span> 成员类内可以访问,类外可以访问<br>保护权限 <span class="hljs-keyword">protected</span> 成员类内可以访问,类外不可以访问 子类也可访问父类的保护内容<br>私有权限 <span class="hljs-keyword">private</span> 成员类内可以访问,类外不可以访问 子类不可访问父类的私有内容<br><br>类与结构体的区别：类的默认权限（即不标注访问权限的时候）是私有，而结构体默认权限是公共<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br><span class="hljs-keyword">public</span>:<br>string name;<br><br><span class="hljs-keyword">protected</span>:<br>string car;<br><br><span class="hljs-keyword">private</span>:<br>string password;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//类内访问各属性</span><br>name = <span class="hljs-string">&quot;张三&quot;</span>;<br>car = <span class="hljs-string">&quot;宝马&quot;</span>;<br>password = <span class="hljs-string">&quot;123456&quot;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>People p1;<span class="hljs-comment">//实例化</span><br>p1.name = <span class="hljs-string">&quot;李四&quot;</span>;<span class="hljs-comment">//类外访问公共属性name</span><br><span class="hljs-comment">//类外访问保护属性和私有属性，都会报错</span><br><span class="hljs-comment">//p1.car = &quot;奔驰&quot;; //err</span><br><span class="hljs-comment">//p1.password = &quot;aaaaa&quot;; //err</span><br>p1.<span class="hljs-built_in">func</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">////////////////////////////////////////////</span><br><span class="hljs-comment">//成员属性设置为私有 作用：  </span><br><span class="hljs-comment">//1、可以自己控制读写权限</span><br><span class="hljs-comment">//2、对于写可以检测数据的有效性  通过成员函数设置的条件进行有效性判断</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span><br>&#123;<br><span class="hljs-comment">//公共接口  自己设置读写权限---通过公共接口在类外设置属性</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//name 设置为可读可写</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_name</span><span class="hljs-params">(string str)</span> </span>&#123;<br>name = str;<br>&#125;<br><span class="hljs-function">string <span class="hljs-title">get_name</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-comment">//age 设置为只读</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_age</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><br><span class="hljs-comment">//sex 设置为只写</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_sex</span><span class="hljs-params">(string x)</span> </span>&#123;<br>sex = x;<br><span class="hljs-comment">//cout &lt;&lt; &quot;性别设置为：&quot; &lt;&lt; sex &lt;&lt; endl; //测试用</span><br>&#125;<br><br><br><span class="hljs-comment">//私有属性</span><br><span class="hljs-keyword">private</span>:<br>string name;<br><span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化</span><br>string sex = <span class="hljs-string">&quot;male&quot;</span>;<br>&#125;;<br><br><br><span class="hljs-comment">//////////////////////////////////////////////////</span><br><span class="hljs-comment">//多文件方式实现  对于一个类中包含其他类，这样的较为复杂的类可采用将他们分别在不同的文件中编辑</span><br><br><span class="hljs-comment">//点类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>X=x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>Y=y;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> X;<br><span class="hljs-type">int</span> Y;<span class="hljs-comment">//横纵坐标</span><br>&#125;;<br><br><span class="hljs-comment">//圆类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//修改圆心</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_center</span><span class="hljs-params">(Point&amp; o)</span></span><br><span class="hljs-function"></span>&#123;<br>center=o;<br>&#125;<br><span class="hljs-comment">//........其他 类方法省略.....</span><br><span class="hljs-keyword">private</span>:<br>Point center;<span class="hljs-comment">//圆心</span><br><span class="hljs-type">int</span> r;<span class="hljs-comment">//半径</span><br>&#125;;<br><br><span class="hljs-comment">/////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//以上Circle类，包含了Point类，可以用多文件的方法修改为：</span><br><br><span class="hljs-comment">//point.h   //头文件只放声明 --函数声明和变量声明</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once  <span class="hljs-comment">//防止重复包含</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//点类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> X;<br><span class="hljs-type">int</span> Y;<span class="hljs-comment">//横纵坐标</span><br>&#125;;<br><br><br><span class="hljs-comment">//point.cpp  放函数的实现</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;point.h&quot;</span></span><br><span class="hljs-comment">//void setX(int x)  //直接定义的话，这是一个全局函数，但实际他是Point作用域下的成员函数,所以加上 Point::</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Point::setX</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>X=x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Point::setY</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>Y=y;<br>&#125;<br><br><br><span class="hljs-comment">//circle.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once  <span class="hljs-comment">//防止重复包含</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;point.h&quot;</span> <span class="hljs-comment">//用到了point 类</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//圆类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//修改圆心</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_center</span><span class="hljs-params">(Point&amp; o)</span></span>;<br><span class="hljs-comment">//........其他 类方法省略.....</span><br><span class="hljs-keyword">private</span>:<br>Point center;<span class="hljs-comment">//圆心</span><br><span class="hljs-type">int</span> r;<span class="hljs-comment">//半径</span><br>&#125;<br><br><br><span class="hljs-comment">//circle.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;circle.h&quot;</span></span><br><br><span class="hljs-comment">//修改圆心</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Circle::set_center</span><span class="hljs-params">(Point&amp; o)</span></span><br><span class="hljs-function"></span>&#123;<br>    center=o;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-对象特性"><a href="#4-2-对象特性" class="headerlink" title="4.2 对象特性"></a>4.2 对象特性</h3><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>一个对象需要使用前初始化，使用后需要及时清理。<br>c++利用了<strong>构造函数（用于初始化）</strong>和 <strong>析构函数（用于清理）</strong>解决上述问题,这两个函数将会被编译器自动调用,完成对象初始化和清理工作,对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编详器会提供编译器提供的构造函数和析构函数是 <strong>空实现</strong> (即函数中没有语句）。</p><p><code>构造函数语法：类名() &#123; &#125;</code></p><p>1.构造函数，&#x3D;&#x3D;没有返回值也不写void&#x3D;&#x3D;<br>&#x3D;&#x3D;函数名称与类名相同&#x3D;&#x3D;<br>构造函数<strong>可以有参数</strong>，因此可以发生重载<br>程序<strong>在调用对象时候</strong>会自动调用构造，无须手动调用，而且只会调用一次</p><p>2,析构函数  进行清理的操作<br>没有返回值 不写void<br>&#x3D;&#x3D;函数名和类名相同&#x3D;&#x3D;  在名称前加 ~  <code>语法：   ~类名（）&#123;&#125; </code><br>析构函数 &#x3D;&#x3D;不可以有参数的，不可以发生重载&#x3D;&#x3D;<br>对象<strong>在销毁前</strong>会自动调用析构函数,而且<strong>只会调用一次</strong></p><p><strong>构造和析构都是必须有的实现,如果我们自己不提供,编译器会提供一个空实现（即什么语句都没有）的构造和析构</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//构造函数</span><br><span class="hljs-built_in">Test</span>()&#123;  <br>cout&lt;&lt;<span class="hljs-string">&quot;test1构造函数的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Test</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;test2析构函数的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Test f; <span class="hljs-comment">// 在栈区创建对象f，函数执行完后会自动释放该对象，所以也会调用析构函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">fun</span>();<span class="hljs-comment">//调用函数</span><br><span class="hljs-comment">//Test f1; //执行完这一行只会调用构造函数，只有main函数执行完才会调用析构函数，但窗口也消失 (调用析构函数会一闪而过)</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>按照参数分类:  无参构造 （也叫 默认构造）和 有参构造<br>按照类型分类:   普通构造       拷贝构造</p><p>三种调用方式：<br>括号法<br>显示法<br>隐式转换法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//构造函数  重载</span><br><span class="hljs-built_in">Test</span>()&#123;  <br>cout&lt;&lt;<span class="hljs-string">&quot;Test 无参构造函数的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">Test</span>(<span class="hljs-type">int</span> a)&#123;  <br>age=a;<br>cout&lt;&lt;<span class="hljs-string">&quot;Test 有参构造函数的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">//拷贝构造函数  (以上两个都是普通构造)</span><br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">const</span> Test &amp;p)&#123; <span class="hljs-comment">//引用类型接收</span><br><span class="hljs-comment">//将传入的对象的所有属性,拷贝到我身上</span><br>age = p. age;<br>height=p.height;<br>cout&lt;&lt;<span class="hljs-string">&quot;Test 拷贝构造函数的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Test</span>()&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Test 析构函数的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> height;<br>&#125;;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//调用方法</span><br><br><span class="hljs-comment">//1，括号法</span><br>Test f1; <span class="hljs-comment">//默认构造函数的调用</span><br><span class="hljs-function">Test <span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//有参构造</span><br><span class="hljs-function">Test <span class="hljs-title">f3</span><span class="hljs-params">(f2)</span></span>;<span class="hljs-comment">//拷贝构造</span><br><span class="hljs-comment">//测试结果</span><br><span class="hljs-comment">//cout&lt;&lt;&quot;f2的年龄为：&lt;&lt;f2.age&lt;&lt;endl;   //10</span><br><span class="hljs-comment">//cout&lt;&lt;&quot;f3的年龄为：&lt;&lt;f3. age&lt;&lt;end1:   //10</span><br><br><span class="hljs-comment">//注意事项:</span><br><span class="hljs-comment">//调用默认构造函数时候,不要加() </span><br><span class="hljs-comment">//如下面这行代码,编译器会认为是一个函数的声明,不会认为在创建对象：  Test p();</span><br><br><br><br><span class="hljs-comment">//2、显示法</span><br>    Test pl;<span class="hljs-comment">//默认构造函数的调用</span><br>    Test p2 = <span class="hljs-built_in">Test</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//有参构造</span><br>    Test p3 = <span class="hljs-built_in">Test</span>(p2);<span class="hljs-comment">//拷贝构造</span><br><br><br><span class="hljs-comment">//注意事项:</span><br><span class="hljs-built_in">Test</span> (<span class="hljs-number">10</span>) ;<span class="hljs-comment">// 上面括号法调用构造函数都是创建匿名对象---特点：当前行执行结束后，系统会立即回收匿名对象</span><br>cout&lt;&lt;<span class="hljs-string">&quot;over&quot;</span>&lt;&lt;endl;  <span class="hljs-comment">///测试用  结果：Test(10)先自动调用析构函数后销毁，接着再输出&quot;over&quot;</span><br><br><br><span class="hljs-comment">//不要利用拷贝构造函数 初始化匿名对象 编译器会认为 Test (p3); 等价于 Test p3;  即对象声明，所以err: p3重定义。</span><br><br><span class="hljs-comment">//3、隐式转换法</span><br>Test p4 = <span class="hljs-number">10</span>;<span class="hljs-comment">//相当于 写了 Test p4 = Test(10);</span><br>Test p5 = p4;<span class="hljs-comment">// Test p5 = Test(p4);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">fun</span>();<span class="hljs-comment">//调用函数</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//C++中拷贝构造函数调用时机通常有三种情况:</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-built_in">Person</span>()<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;默认构造函数调用&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age)<br>    &#123;<br>        m_Age = age;<br>        cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数调用&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p)<br>    &#123;<br>        m_Age = p.m_Age;<br>        cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数调用&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Person</span>()<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;析构函数调用&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-type">int</span> m_Age;<br><br><br>&#125;;<br><br><span class="hljs-comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;      <span class="hljs-comment">//有参构造</span><br>    Person p2=p1;       <span class="hljs-comment">//拷贝构造</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//执行完test1后的结果：</span><br><span class="hljs-comment">//有参构造函数调用</span><br><span class="hljs-comment">//拷贝构造函数调用</span><br><span class="hljs-comment">//p2的年龄10</span><br><span class="hljs-comment">//析构函数调用</span><br><span class="hljs-comment">//析构函数调用</span><br><br><br><span class="hljs-comment">//2.值传递的方式給函数参数传值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_work</span><span class="hljs-params">(Person p)</span>  <span class="hljs-comment">//形参仅作为实参的一份拷贝   </span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//空实现</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Person p;<br>    <span class="hljs-built_in">do_work</span>(p);          <span class="hljs-comment">//调用do_work函数，将实参p拷贝给形参p</span><br>&#125;<br><span class="hljs-comment">//结果： </span><br><span class="hljs-comment">//默认构造函数调用</span><br><span class="hljs-comment">//拷贝构造函数调用</span><br><span class="hljs-comment">//析构函数调用</span><br><span class="hljs-comment">//析构函数调用</span><br><br><br><br><span class="hljs-comment">//3.以值方式返回局部对象</span><br><span class="hljs-function">Person <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Person p1;<br>    cout &lt;&lt; (<span class="hljs-type">int</span>*) &amp; p1 &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> p1;<span class="hljs-comment">//返回值而非本身，编译器会自动拷贝值然后传递</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Person p = <span class="hljs-built_in">func</span>();<br>    cout &lt;&lt; (<span class="hljs-type">int</span>*)&amp;p &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//结果：</span><br><span class="hljs-comment">//默认构造函数调用</span><br><span class="hljs-comment">//00000021470FF4A4</span><br><span class="hljs-comment">//00000021470FF4A4</span><br><span class="hljs-comment">//析构函数调用</span><br><span class="hljs-comment">//没有调用拷贝构造，原因是编译器优化：编译器检测到可以省略拷贝构造函数调用的情况，它可能会将其省略以提高代码效率。</span><br><span class="hljs-comment">//实际应该有拷贝构造（放到到第四行），而且两处 地址也不相同！！！</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//test1();</span><br>    <span class="hljs-comment">//test2();</span><br>    <span class="hljs-built_in">test3</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>####4.2.8 静态成员</p><p>静态成员就是在成员变量和成员函数前加上关键字static,称为静态成员。</p><p>静态成员分为： 静态成员变量，静态或员函数。<br><strong>不属于某个对象，而是所有对象共享同—份数据</strong><br>在编译阶段分配内存<br><strong>类内声明，类外初始化</strong> ，<strong>因为静态成员属于整个类，而不属于某个对象，如果在类内初始化，会导致每个对象都包含该静态成员，这是矛盾的</strong><br>只有静态常量成员才能在类内初始化</p><p>所有对象共享同一个函数<br>静态成员函数只能访问静态成员变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<span class="hljs-comment">//类内声明</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> A;<span class="hljs-comment">//静态成员变量</span><br><span class="hljs-type">int</span> num;<span class="hljs-comment">//非静态</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> T=<span class="hljs-number">10</span>;<span class="hljs-comment">//静态常量成员</span><br><br><span class="hljs-keyword">private</span>:   <span class="hljs-comment">//静态成员变量也是有访问权限的（静态成员函数也是），但也要在类外初始化  </span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> B;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>B=<span class="hljs-number">99</span>;<br><span class="hljs-comment">//num=999;  //err!!! 静态成员函数只能访问静态成员变量。 因为无法区分是对哪个对象的非静态变量进行操作</span><br>cout&lt;&lt;<span class="hljs-string">&quot;静态成员函数的调用&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-type">int</span> Person::A=<span class="hljs-number">100</span>;<span class="hljs-comment">//类外声明并初始化  Person:: 表示A所属的作用域</span><br><span class="hljs-type">int</span> Person::B=<span class="hljs-number">77</span>;<span class="hljs-comment">//类外声明并初始化</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>A=<span class="hljs-number">200</span>; <span class="hljs-comment">//共享同—份数据，即所有的A都是同一个地址的A </span><br>cout&lt;&lt;A&lt;&lt;endl;<span class="hljs-comment">//结果是200</span><br>Person p;<br>cout&lt;&lt;p.A&lt;&lt;endl; <span class="hljs-comment">//200  通过对象访问</span><br>cout&lt;&lt;Person::A&lt;&lt;endl; <span class="hljs-comment">//也是200  也可以直接通过类名访问</span><br><br><span class="hljs-comment">//cout&lt;&lt;Person::B&lt;&lt;endl; // error,类外无法访问私有静态成员变量</span><br><br><span class="hljs-comment">//同 静态成员变量，两种访问方式</span><br>p.<span class="hljs-built_in">func</span>();<span class="hljs-comment">//</span><br>Person::<span class="hljs-built_in">func</span>(); <span class="hljs-comment">//通过类名调用</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><p>####4.3.1 成员变量和成员函数分开存储</p><p>在C++中，类内的成员变量和成员函数分开存储<br>只有非静态成员变量才属于类的对象上，成员函数和静态成员变量都不属于类上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//空类也占一个字节的空间</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person1</span>&#123;<br>&#125;;<br>Person1 p1;<span class="hljs-comment">//</span><br>cout&lt;&lt;<span class="hljs-built_in">sizeof</span>(p1)&lt;&lt;endl; <span class="hljs-comment">//大小为1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person2</span>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-comment">//以下都不属于类的对象上</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> b;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;<br>Person2 p2;<br>cout&lt;&lt;<span class="hljs-built_in">sizeof</span>(p2)&lt;&lt;endl; <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码<br>那么问题是：这一块代码是如何区分那个对象调用自己的呢？<br>C++通过提供特殊的对象指针– this指针，解决上述问题，<strong>this指针指向被调用的成员函数所属的对象</strong> （本质是一个指针常量： <code> 类名 *const this</code>）</p><p>this指针是&#x3D;&#x3D;隐含&#x3D;&#x3D;每一个非静态成员函数内的一种指针<br>this指针不需要定义，直接使用即可</p><p>this指针的用途:<br>当形参和成员变量同名时，可用this指针来区分<br>在类的非静态成员函数中返回对象本身，可用   return *this</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age)<span class="hljs-comment">//构造函数</span><br>&#123;<br><span class="hljs-comment">//age=age; //err 如果这样写，编译器会认为形参的age和成员变量的age是同一个，就会出bug</span><br><span class="hljs-keyword">this</span>-&gt;age=age;<span class="hljs-comment">//用this指针，this指针指向 被调用的成员函数 所属的对象   </span><br>&#125;<br><br><span class="hljs-comment">//................................</span><br><span class="hljs-function">Person&amp; <span class="hljs-title">age_add</span><span class="hljs-params">(Person&amp; p)</span><span class="hljs-comment">//注意要用 引用方式 返回.</span></span><br><span class="hljs-function"><span class="hljs-comment">//如果返回类型是void,则不能链式调用，只能p.age_add(p1)</span></span><br><span class="hljs-function"><span class="hljs-comment">//如果返回类型是 Person ,非引用，p2.age_add(p1).age_add(p1).age_add(p1); 那么这样链式调用返回的会是p2的复制，p2只有第一次会被修改</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;age+=p.age;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//...................................</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<span class="hljs-comment">//p1调用构造函数，this指针指向的是p1</span><br>cout&lt;&lt;<span class="hljs-string">&quot;p1的年龄 &quot;</span>&lt;&lt;p1.age&lt;&lt;endl;<br><br><span class="hljs-comment">//...................................</span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><br><span class="hljs-comment">//链式调用</span><br>p2.<span class="hljs-built_in">age_add</span>(p1).<span class="hljs-built_in">age_add</span>(p1).<span class="hljs-built_in">age_add</span>(p1);<span class="hljs-comment">//40</span><br><br>cout&lt;&lt;<span class="hljs-string">&quot;p2的年龄： &quot;</span>&lt;&lt;p2.age&lt;&lt;endl; <br><br>&#125;<br><br><span class="hljs-comment">//...................................</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test1</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要<strong>注意有没有用到this指针</strong>，如果用到this指针，需要加以判断保证代码的健壮性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show_Class_name</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;类名为 Person&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show_Person_age</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>)&#123; <span class="hljs-comment">//防错处理 空指针调用类时访问里面的成员变量，这样会报错</span><br>cout&lt;&lt;<span class="hljs-keyword">this</span>-&gt;m_age&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> m_age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person *p=<span class="hljs-literal">NULL</span>;      <span class="hljs-comment">//空</span><br><br>p-&gt;<span class="hljs-built_in">show_Class_name</span>();<br>p-&gt;<span class="hljs-built_in">show_Person_age</span>();<span class="hljs-comment">//如果没有防错处理就会err</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p>常函数：<br>成员函数后面加const后我们称为这个函数为常函数<br><strong>常函数内不可以修改成员属性</strong><br>成员属性声明时<strong>加关键字mutable后，在常函数中依然可以修改</strong></p><p>常对象：<br>声明对象前加const称该对象为常对象<br><strong>常对象只能调用常函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//this指针的本质 是指针常量  指针的指向是不可以修改的  如：Person * const this; this = NULL;//err</span><br>    <br>    <span class="hljs-comment">//本质：在成员函数后面加const,修饰的是this指针,让指针指向的值也不可以修改！！！ const Person * const this</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change_val</span><span class="hljs-params">()</span> <span class="hljs-type">const</span>   <span class="hljs-comment">//常函数</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//this-&gt;m_A = 100; //不可修改</span><br>    <span class="hljs-keyword">this</span>-&gt;m_B=<span class="hljs-number">200</span>;<span class="hljs-comment">//特殊变量,即使在常函数中,也可以修改这个值,加关键字mutable</span><br>    &#125;<br>    <span class="hljs-comment">//................................</span><br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>              <span class="hljs-comment">//不是常函数</span></span><br><span class="hljs-function">    </span>&#123;<br>m_A=<span class="hljs-number">222</span>;<br>&#125;<br><br><span class="hljs-type">int</span> m_A:<br><span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> Person p;  <span class="hljs-comment">//创建常对象</span><br><span class="hljs-comment">//p.m_A=100;     //err</span><br>p.m_B=<span class="hljs-number">300</span>;       <span class="hljs-comment">//可修改</span><br><br><span class="hljs-comment">//常对象只能调用常函数 </span><br><span class="hljs-comment">//常对象不能修改属性，常函数也不能，如果能调用普通函数，那就能够修改属性了，所以常对象只能调用常函数。 err </span><br><span class="hljs-comment">// p.func();     //err  </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>在程序里,有些<strong>私有属性</strong>也想让<strong>类外</strong>特殊的一些函数或者类进行访问,就需要用到友元的技术<br>友元的目的就是让一个函数或者类 访问另一个类中<strong>私有成员</strong><br>，友元的关键字为 &#x3D;&#x3D;friend&#x3D;&#x3D;</p><p>友元的三种实现：</p><blockquote><p>全局函数做友元<br>类做友元<br>成员函数做友元</p></blockquote><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-comment">//建筑物类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span> <br>&#123;<br><span class="hljs-comment">//将全局函数func1 作为Building的朋友,使其可访问Building中的私有成员</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(Building* b)</span></span>;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Building</span>() <span class="hljs-comment">//构造函数</span><br>    &#123;<br>    m_sitting_room=<span class="hljs-string">&quot;客厅&quot;</span>;<br>    m_bedroom=<span class="hljs-string">&quot;卧室&quot;</span>;<br>    &#125;<br>    <br><span class="hljs-keyword">public</span>:<br>string m_sitting_room;<br><span class="hljs-keyword">private</span>:<span class="hljs-comment">//私有</span><br>string m_bedroom; <br><br>&#125;;<br><br><span class="hljs-comment">//............................</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(Building *b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//访问公共属性</span><br>cout&lt;&lt;<span class="hljs-string">&quot;func1函数正在访问：&quot;</span>&lt;&lt;b-&gt;m_sitting_room&lt;&lt;endl;<br><span class="hljs-comment">//访问私有属性</span><br>cout&lt;&lt;<span class="hljs-string">&quot;func1函数正在访问：&quot;</span>&lt;&lt;b-&gt;m_bedroom&lt;&lt;endl;<br><br>&#125;<br><br><span class="hljs-comment">//............................</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Building b; <br><span class="hljs-built_in">func1</span>(&amp;b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-comment">//建筑物类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span> <br>&#123;<br><span class="hljs-comment">//old_friends类 作为Building的朋友,使其可访问Building中的私有成员</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">old_friends</span>; <span class="hljs-comment">//@@</span><br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Building</span>(); <span class="hljs-comment">//构造函数</span><br><br><span class="hljs-keyword">public</span>:<br>string m_sitting_room;<br><span class="hljs-keyword">private</span>: <span class="hljs-comment">//私有</span><br>string m_bedroom; <br>&#125;;<br><br><span class="hljs-comment">//Building 的构造函数</span><br><span class="hljs-comment">//！！！ 类外实现函数   要用 类名::函数名  的形式！！！！</span><br>Building::<span class="hljs-built_in">Building</span>()  <span class="hljs-comment">//被调用 进行初始化</span><br>&#123;<br>    m_sitting_room=<span class="hljs-string">&quot;客厅（公共属性）&quot;</span>;<br>    m_bedroom=<span class="hljs-string">&quot;卧室（私有属性）&quot;</span>;<br>&#125;<br><span class="hljs-comment">//.................................</span><br><br><span class="hljs-comment">// old_friends类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">old_friends</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">old_friends</span>();<span class="hljs-comment">//构造函数</span><br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//访问函数 类内声明  设置为可访问Building类私有函数</span><br>    <span class="hljs-comment">//void visit_2();//设置为不可访问Building类私有函数  </span><br>    <span class="hljs-comment">//将第6行改为 friend class old_friends::visit(); 即可，（告诉Building，old_friends类的visit函数是朋友函数，visit_2不是）此处不做实现</span><br>    <br><span class="hljs-keyword">private</span>:<br>Building *b;<br>&#125;;<br><br><span class="hljs-comment">//old_friends的构造函数</span><br>old_friends::<span class="hljs-built_in">old_friends</span>()<br>&#123;<br>b=<span class="hljs-keyword">new</span> Building;<span class="hljs-comment">//访问Building类 并调用构造函数</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">old_friends::visit</span><span class="hljs-params">()</span>  <span class="hljs-comment">//类外实现</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;old_friends::visit正在访问：&quot;</span>&lt;&lt;b-&gt;m_sitting_room&lt;&lt;endl;<br><br>cout&lt;&lt;<span class="hljs-string">&quot;old_friends::visit正在访问：&quot;</span>&lt;&lt;b-&gt;m_bedroom&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">void old_friends::visit()</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">cout&lt;&lt;&quot;old_friends::visit_2正在访问：&quot;&lt;&lt;b-&gt;m_sitting_room&lt;&lt;endl;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//cout&lt;&lt;&quot;old_friends::visit_2正在访问：&quot;&lt;&lt;b-&gt;m_bedroom&lt;&lt;endl;  //err!!! 非朋友函数，不可访问私有属性</span><br><span class="hljs-comment">&#125;     */</span><br><br><span class="hljs-comment">//.....................................</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>old_friends f; <span class="hljs-comment">//old_friends类 实例化，并调用构造函数</span><br>f.<span class="hljs-built_in">visit</span>();<br>    <span class="hljs-comment">//f.visit_2();</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：<br>对于内置数据类型，编译器知道如何进行运算，但是对于自定义的则不知道。 对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型（如将自定义的类型进行运算）。</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//实现自定义的数据类型相加</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">num</span><span class="hljs-comment">//自定义的数据类型</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_a;<br><span class="hljs-type">int</span> m_b;<br>    <span class="hljs-comment">//1 通过自定义成员函数实现加号重载</span><br>    num <span class="hljs-keyword">operator</span>+(num &amp;n)  <br>    &#123;<br>        num tmp;<br>        tmp.m_a=<span class="hljs-keyword">this</span>-&gt;m_a+n.m_a;<br>        tmp.m_b=<span class="hljs-keyword">this</span>-&gt;m_b+n.m_b;<br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现n1+n2</span><br>num n1,n2; <br>n1.m_a=<span class="hljs-number">12</span>,n1,m_b=<span class="hljs-number">13</span>;<br>n2.m_a=<span class="hljs-number">14</span>,n2,m_b=<span class="hljs-number">15</span>;<br><br><br>num n3=n1.<span class="hljs-keyword">operator</span>+(n2);<span class="hljs-comment">//调用</span><br>num n4=n1+n2;    <span class="hljs-comment">//也可以直接用 +</span><br><br><br><span class="hljs-comment">//2 全局函数实现加号重载 类似成员函数，函数名取为 operator+就也可以直接用 +   （实现省略...)</span><br><br><br><span class="hljs-comment">// 本质就是函数的重载，只不过将函数名取为operator+就可以直接简化成用加号代替，而不需要写成函数调用的形式</span><br><br><br><span class="hljs-comment">//总结1：对于内置的数据类型的表达式的的运算符是不可能改变的，例如1+1=2 不能用重载去变成1+1=3</span><br><span class="hljs-comment">//总结2：不要滥用运算符重载</span><br><br></code></pre></td></tr></table></figure><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">num</span><span class="hljs-comment">//自定义的数据类型</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_a;<br><span class="hljs-type">int</span> m_b;<br>    <span class="hljs-comment">//1 通过自定义成员函数实现 &lt;&lt; 重载</span><br>    <span class="hljs-comment">/*num operator&lt;&lt;(num &amp;n)  </span><br><span class="hljs-comment">    &#123;//这样做只能简化为 n&lt;&lt;cout 而不是cout&lt;&lt;n,所以成员函数无法实现</span><br><span class="hljs-comment">        num tmp;</span><br><span class="hljs-comment">        tmp.m_a=this-&gt;m_a+n.m_a;</span><br><span class="hljs-comment">        tmp.m_b=this-&gt;m_b+n.m_b;</span><br><span class="hljs-comment">        return tmp;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br><br><span class="hljs-comment">//2 通过全局函数实现</span><br><br><span class="hljs-comment">//接受的cout对象属于ostream(输出流)类型 ，所以返回输出的内容也要把返回类型设置为该类型</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;out,num &amp;n)<br>&#123;<br><span class="hljs-comment">//本质：函数调用 operator&lt;&lt;(cout,p) ---- 简化为cout&lt;&lt;p;</span><br>cout&lt;&lt;<span class="hljs-string">&quot;m_a=&quot;</span>&lt;&lt;n.m_a&lt;&lt;<span class="hljs-string">&quot;m_b=&quot;</span>&lt;&lt;n.m_b;<br><br><span class="hljs-keyword">return</span> out;<span class="hljs-comment">//此处返回out是为了实现链式调用 如&quot;&lt;&lt;endl&quot;这一步</span><br>&#125;<br><br><br>num n1.m_a=<span class="hljs-number">11</span>,n1.m_b=<span class="hljs-number">23</span>;<br><span class="hljs-comment">//最终实现自定义数据类型的输出操作</span><br>cout&lt;&lt;n1;<br><br><br></code></pre></td></tr></table></figure><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">my_int</span><br>&#123;<br>    <span class="hljs-comment">//友元 实现左移运算符的重载</span><br>    <span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout, my_int a);<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">my_int</span>()<br>    &#123;<br>        m_num = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//重载 前置++</span><br>    <span class="hljs-comment">//返回值为引用类型，便于多次操作</span><br>    my_int&amp; <span class="hljs-keyword">operator</span>++()<br>    &#123;<br>        <span class="hljs-comment">//先自增，在返回自身</span><br>        m_num++;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//重载 后置++</span><br>    <span class="hljs-comment">//后置++重载只能返回 my_int，不能返回引用，因为tmp是局部变量，</span><br>    my_int <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) <span class="hljs-comment">//加上占位参数int是为了区分前置++和后置++</span><br>    &#123;<br>        my_int tmp = *<span class="hljs-keyword">this</span>; <span class="hljs-comment">//记录当前的值</span><br>        m_num++;<br>        <span class="hljs-keyword">return</span> tmp;         <span class="hljs-comment">//返回递增前的值</span><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> m_num;<br><br>&#125;;<br><br><br><span class="hljs-comment">// 左移运算符的重载</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; cout,my_int a)<br>&#123;<br>    cout &lt;&lt; a.m_num;<br>    <span class="hljs-keyword">return</span> cout;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    my_int a;<br>    <br>    cout &lt;&lt; a++ &lt;&lt; endl;    <span class="hljs-comment">//0</span><br>    cout &lt;&lt; a &lt;&lt; endl;      <span class="hljs-comment">//1</span><br><br>    cout &lt;&lt; ++a &lt;&lt; endl;    <span class="hljs-comment">//2</span><br>    cout &lt;&lt; a &lt;&lt; endl;      <span class="hljs-comment">//2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age)<span class="hljs-comment">//构造函数</span><br>    &#123;<br>        m_Age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span> (age);<br>    &#125;<br><br>    ~<span class="hljs-built_in">Person</span>()       <span class="hljs-comment">//析构函数</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">delete</span> m_Age;<br>            m_Age = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br><br>    Person&amp; <span class="hljs-keyword">operator</span>=(Person&amp; p)<br>    &#123;<br>        <span class="hljs-comment">//编译器提供的是浅拷贝,如下：</span><br>        <span class="hljs-comment">//m_Age = p.m_Age;</span><br><span class="hljs-comment">//当数据创建在堆区时，自动调用析构函数释放内存，但是如果数据被拷贝后（浅拷贝使得二者都指向了同一块内存），如 下面main函数中p2=p1。 p1,p2销毁时会两次释放同一块内存，导致出错，所以需要使用深拷贝来实现</span><br><br>        <span class="hljs-comment">// 实际应该先释放原来的空间，然后深拷贝</span><br>        <span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">delete</span> m_Age;<br>            m_Age = <span class="hljs-literal">NULL</span>;<br>        &#125;<br><br>        m_Age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.m_Age);      <span class="hljs-comment">//重新申请一块空间存放值，并拷贝</span><br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span>* m_Age;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br>    <span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-number">30</span>)</span></span>;<br><br>    p3 = p2 = p1;       <span class="hljs-comment">//用重载后的赋值运算符</span><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;p1的年龄是&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄是&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p3的年龄是&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><p>函数调用运算符（）也可以重载<br>由于重载后使用的方式非常像函数的调用，因此称为<strong>仿函数</strong><br>&#x3D;&#x3D;仿函数没有固定写法，非常灵活&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">my_print</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(string str)</span>         <span class="hljs-comment">//无返的仿函数</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; str &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">my_add</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>  <span class="hljs-comment">//有返的仿函数</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> num1 + num2;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    my_print p1;<br>    <span class="hljs-built_in">p1</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    my_add a1;<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">a1</span>(<span class="hljs-number">12</span>, <span class="hljs-number">24</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;res= &quot;</span> &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-comment">//匿名对象调用    不实例化，直接使用类的方法</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;my_add()(100,200)= &quot;</span> &lt;&lt; <span class="hljs-built_in">my_add</span>()(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//test1();</span><br><br>    <span class="hljs-built_in">test2</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h3><h4 id="4-6-1-基本语法-继承方式"><a href="#4-6-1-基本语法-继承方式" class="headerlink" title="4.6.1 基本语法 &amp; 继承方式"></a>4.6.1 基本语法 &amp; 继承方式</h4><p>继承的好处:减少重复代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//语法:    class A: public B</span><br><span class="hljs-comment">//A类称为子类 或派生类   B 类称为父类 或基类 </span><br><br><span class="hljs-comment">//eg:</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">fa</span><br>&#123;<br><span class="hljs-comment">//....</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span> : <span class="hljs-keyword">public</span> fa<br>&#123;<br><span class="hljs-comment">//...</span><br>&#125;;<br><br><span class="hljs-comment">/////////////////////////////////</span><br><span class="hljs-comment">//继承方式有  公共继承public  保护继承 protected   私有继承 private</span><br><span class="hljs-comment">//  私密权限低到高： 公共--&gt;保护--&gt;私有</span><br><span class="hljs-comment">//  父类的 private属性,不论何种继承方式，子类都不可访问！！！</span><br><span class="hljs-comment">//继承只能让私密权限上升，而不能降级</span><br><span class="hljs-comment">//如以public继承父类，public是最低私密权限，所以父类各属性在子类中不变，如果以protected继承，则低于protected需要上升为protected，高于的则不变。  </span><br><br><span class="hljs-comment">//即继承方式表示父类各属性在子类中的上升至的最低权限（父类中低的要上升，高的不变）。</span><br></code></pre></td></tr></table></figure><h4 id="4-6-2-继承模型"><a href="#4-6-2-继承模型" class="headerlink" title="4.6.2 继承模型"></a>4.6.2 继承模型</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_a;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> m_b;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> m_c;<br>&#125;;<br><br><br><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_d;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Son s1;<br>    cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(s1) &lt;&lt; endl;<span class="hljs-comment">//16</span><br>    <span class="hljs-comment">// 父类中私有成员属性 是被编译器给隐藏了，因此是访问不到，但是确实被继承下去了</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-6-3-继承中构造和析构顺序"><a href="#4-6-3-继承中构造和析构顺序" class="headerlink" title="4.6.3 继承中构造和析构顺序"></a>4.6.3 继承中构造和析构顺序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Base</span>()<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base的构造函数!&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Base</span>()<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base的析构函数!&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Son</span>()<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Son的构造函数!&quot;</span> &lt;&lt; endl;<br>    &#125;<br><br>    ~<span class="hljs-built_in">Son</span>()<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Son的析构函数!&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//Base b1;</span><br><br>    Son s1;<br>    <span class="hljs-comment">//结果：</span><br>    <span class="hljs-comment">/*Base的构造函数!</span><br><span class="hljs-comment">    Son的构造函数!</span><br><span class="hljs-comment">    Son的析构函数!</span><br><span class="hljs-comment">    Base的析构函数!*/</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span><br></code></pre></td></tr></table></figure><h4 id="4-6-4-继承同名成员处理方式"><a href="#4-6-4-继承同名成员处理方式" class="headerlink" title="4.6.4 继承同名成员处理方式"></a>4.6.4 继承同名成员处理方式</h4><p>在子类中 访问子类同名成员<strong>直接访问</strong>即可  ，要访问父类同名成员就<strong>需要加作用域</strong><br>可以继承多个父类： 语法：<br><code>class 子类 : 继承方式 父类1 ,继承方式 父类2 ....</code><br>访问同名成员时也要区分作用域！！！</p><p>静态成员与非静态成员处理方式一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_a;<br><br>    <span class="hljs-built_in">Base</span>()<br>    &#123;<br>        m_a = <span class="hljs-number">100</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//重载</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base-func()的调用&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Base-func(int a)的调用&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_a;<br><br>    <span class="hljs-built_in">Son</span>()<br>    &#123;<br>        m_a = <span class="hljs-number">200</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Son-func()的调用&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Son s;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Son.m_a= &quot;</span> &lt;&lt; s.m_a &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Base.m_a= &quot;</span> &lt;&lt; s.Base::m_a &lt;&lt; endl;<br><br>    <span class="hljs-comment">//如果子类中出现和父类同名的成员函数,子类的同名成员会隐藏掉父类中所有同名成员函数,要加作用域才能访问</span><br>    s.<span class="hljs-built_in">func</span>();<br>    s.Base::<span class="hljs-built_in">func</span>();<br>    s.Base::<span class="hljs-built_in">func</span>(<span class="hljs-number">10086</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-6-5-菱形继承"><a href="#4-6-5-菱形继承" class="headerlink" title="4.6.5 菱形继承"></a>4.6.5 菱形继承</h4><p>菱形继承概念：两个派生类继承同一个基类，又有某个类同时继承者两个派生类，这种继承被称为菱形继承，或者钻石继承</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//通过 VS开发人员提示工具（Developer Command Prompt )查看类的结构和继承关系</span><br><span class="hljs-comment">// 打开开发人员提示工具--&gt;切换盘符至所需查看的项目所在磁盘 --&gt; cd 该项目路径 --&gt; cl /d1 reportSingleClassLayout类名 &quot;源文件名&quot;--&gt;回车即可</span><br><br><br><span class="hljs-comment">//动物类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//利用 虚继承-- virtual（继承的是一个指针而非父类本体）</span><br><span class="hljs-comment">//狮子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lion</span> :<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal&#123;&#125;;<br><br><br><span class="hljs-comment">//虎类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span> :<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><br><span class="hljs-comment">//狮虎兽类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Liger</span>:<span class="hljs-keyword">public</span> Lion,<span class="hljs-keyword">public</span> Tiger&#123;&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Liger liger1;<br>    <br>    <span class="hljs-comment">//菱形继承直接继承导致数据有两份, 资源浪费,可利用虚继承解决</span><br>    liger1.Lion::m_Age = <span class="hljs-number">20</span>;<br>    liger1.Tiger::m_Age = <span class="hljs-number">21</span>;<br><br>    <span class="hljs-comment">//由于数据只有一份，所以不会造成二义性，访问的都是同一份数据</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Liger--m_Age= &quot;</span> &lt;&lt; liger1.m_Age &lt;&lt; endl;           <span class="hljs-comment">//21</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Lion--m_Age= &quot;</span> &lt;&lt; liger1.Lion::m_Age &lt;&lt; endl;      <span class="hljs-comment">//21</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Tiger--m_Age= &quot;</span> &lt;&lt; liger1.Tiger::m_Age &lt;&lt; endl;    <span class="hljs-comment">//21</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test1</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/26/xTQfL6v1drP9VKO.png" alt="virtual_.png"></p><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p>多态分为两类<br>静态多态：函数重载和运算符重载属于<strong>静态多态</strong>,复用函数名<br>动态多态：派生类和虚函数实现运行时多态<br>区别：<br>静态多态的函数地址早绑定-编译阶段确定函数地址<br>动态多态的函数地址晚绑定-运行阶段确定函数地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 虚函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> :<span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span>    <span class="hljs-comment">// 子类重写父类虚函数时可以加virtual也可不加</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;小猫在说话&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> :<span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>&#125;;<br><br><br><span class="hljs-comment">//地址早绑定 在编译阶段确定函数地址</span><br><span class="hljs-comment">//如果想执行让猫说话, 那么这个函数地址就不能提前绑定, 需要在运行阶段进行绑定(地址晚绑定)</span><br><br><span class="hljs-comment">//动态多态满足条件</span><br><span class="hljs-comment">//1、有继承关系</span><br><span class="hljs-comment">//2、子类重写父类的虚函数  （重写：函数命，参数列表，返回类型完全一样）</span><br><br><span class="hljs-comment">//动态多态使用：</span><br><span class="hljs-comment">//父类的指针或者引用 执行子类对象</span><br><br><br><br><span class="hljs-comment">//父类的引用可直接指向子类的对象,不需要类型转换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doSpeak</span><span class="hljs-params">(Animal &amp;animal)</span>    <span class="hljs-comment">//Animal &amp; animal =cat;</span></span><br><span class="hljs-function"></span>&#123;<br>    animal.<span class="hljs-built_in">speak</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    Cat cat;<br>    <span class="hljs-built_in">doSpeak</span>(cat);              <span class="hljs-comment">//小猫在说话</span><br><br>    Dog dog;<br>    <span class="hljs-built_in">doSpeak</span>(dog);              <span class="hljs-comment">//动物在说话</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Animal 类<br><strong>vfptr表示虚拟函数指针</strong> 指向 vftab（虚拟函数表）中的函数<br>（size等于4是因为指针的大小为4）</p><p><img src="https://s2.loli.net/2023/02/27/U6NF1XZcYJbxr2M.png" alt="image.png"></p><p>Dog 类，没有发生speak函数重写，所以vftab中的函数是Animal类的speak函数</p><p><img src="https://s2.loli.net/2023/02/27/82qv1AHUdk5WEuT.png" alt="image.png"></p><p>Cat 类，发生speak函数重写，vftab中的函数是Cat类的speak函数，所以输出是  小猫在说话</p><p><img src="https://s2.loli.net/2023/02/27/Pf8OGMcoyEx1NLZ.png" alt="image.png"></p><h4 id="4-7-2-多态案例—-计算器类"><a href="#4-7-2-多态案例—-计算器类" class="headerlink" title="4.7.2 多态案例—-计算器类"></a>4.7.2 多态案例—-计算器类</h4><p>多态的优点：<br>代码组织结构清晰<br>可读性强<br>利于前期和后期的扩展以及维护 </p><p>在真实开发中 提倡 &#x3D;&#x3D;开闭原则&#x3D;&#x3D; ：<strong>对扩展进行开发,对修改进行关闭</strong></p>]]></content>
    
    
    <categories>
      
      <category>private-page</category>
      
    </categories>
    
    
    <tags>
      
      <tag>私密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gin学习记录-自定义错误信息</title>
    <link href="/2023/08/05/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/08/05/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h2><p>当校验错误时，根据返回的错误信息自定义一个错误提示返回给前端页面，方便处理。</p><span id="more"></span><hr><h3 id="定义需要用到的结构体"><a href="#定义需要用到的结构体" class="headerlink" title="定义需要用到的结构体"></a>定义需要用到的结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SignUserInfo <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// 添加验证器 常用的</span><br>Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; binding:&quot;required&quot; msg:&quot;昵称不能为空&quot;`</span>    <span class="hljs-comment">// 用户名</span><br>Age  <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot; binding:&quot;lt=100,gt=0&quot; msg:&quot;年龄不符合要求&quot;`</span> <span class="hljs-comment">// 年龄</span><br>&#125;   <br></code></pre></td></tr></table></figure><hr><h3 id="封装成独立的函数"><a href="#封装成独立的函数" class="headerlink" title="封装成独立的函数"></a>封装成独立的函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetValidMsg</span><span class="hljs-params">(err <span class="hljs-type">error</span>, user SignUserInfo)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// 将err接口断言为具体类型</span><br><span class="hljs-keyword">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;<br>getObj := reflect.TypeOf(&amp;user)<br>fmt.Println(<span class="hljs-string">&quot;类型为：&quot;</span>, getObj)<br><br><span class="hljs-comment">// 断言成功</span><br><span class="hljs-keyword">for</span> _, e := <span class="hljs-keyword">range</span> errs &#123; <span class="hljs-comment">// 遍历每一个错误信息 报错信息可能有多个</span><br><span class="hljs-comment">// 根据报错字段名，获取结构体的具体字段</span><br><span class="hljs-keyword">if</span> f, exits := getObj.Elem().FieldByName(e.Field()); exits &#123;<br>msg := f.Tag.Get(<span class="hljs-string">&quot;msg&quot;</span>)<br>fmt.Println(msg)<br><span class="hljs-keyword">return</span> msg<br>&#125; f f, exits := getObj.Elem().FieldByName(e.Field()); exits &#123;<br>msg := f.Tag.Get(<span class="hljs-string">&quot;msg&quot;</span>)<br>fmt.Println(msg)<br><span class="hljs-keyword">return</span> msg<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 没有检查到验证器错误则返回空</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>validator.ValidationErrors</code> 是一个错误类型，用于存储验证器验证失败的错误信息 <code>err.(validator.ValidationErrors)</code> 表示<br>将 <code>err</code> 转换为 <code>validator.ValidationErrors</code> 类型。如果 <code>err</code> 是 <code>validator.ValidationErrors</code> 类型或者它的指针类型，则类型断言会返回转换后的 <code>validator.ValidationErrors</code>类型的值和 <code>true</code>。如果 <code>err</code> 不是 <code>validator.ValidationErrors</code>类型或者它的指针类型，则类型断言会返回 <code>validator.ValidationErrors</code>类型的零值和 <code>false</code>。 </p><p>通过 <code>getObj.Elem()</code> 获取结构体的元素类型，因为 <code>getObj</code> 是结构体指针类型的反射对象，<br>使用 <code>Elem()</code> 方法可以获取指针指向的实际结构体类型。<br>然后，使用 <code>FieldByName()</code> 方法根据错误字段名 <code>e.Field()</code> 查找结构体中对应的字段。<br>如果字段存在， <code>f</code> 就是一个包含该字段信息的反射对象，并且 <code>exits</code> 为 <code>true</code> 。如果字段不存在，<br><code>f</code> 将是零值的反射对象，并且 <code>exits</code> 为 <code>false</code> 。</p><hr><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br><br>router.POST(<span class="hljs-string">&quot;/check&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;访问...&quot;</span>)<br><span class="hljs-keyword">var</span> user SignUserInfo<br>err := c.ShouldBindJSON(&amp;user) <span class="hljs-comment">// 返回error信息，不报错则返回空</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><br>customErr := GetValidMsg(err, user) <span class="hljs-comment">// 自定义的错误信息</span><br><br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: customErr&#125;)<br><br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;data&quot;</span>: user&#125;)<br>&#125;)<br><br>err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>截图如下：<br><img src="https://s2.loli.net/2023/08/05/RMEKjNrvoHPy1kf.png" alt="校验失败返回自定义的错误信息"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>学习这一节的时候看不懂，看源码也看不明白，这个时候最可靠的就是chatGPT了，全部代码复制粘贴发给他，然后让他一个函数一个函数解释，真是太棒了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>gin</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gin学习记录-四大请求方式</title>
    <link href="/2023/08/04/gin-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%9B%9B%E5%A4%A7%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/08/04/gin-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%9B%9B%E5%A4%A7%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><img src="https://s2.loli.net/2023/08/04/8BK3UqZutdebsgR.png" alt="辉夜酱"></p><h1 id="以文字资源为例学习四大请求方式"><a href="#以文字资源为例学习四大请求方式" class="headerlink" title="以文字资源为例学习四大请求方式"></a>以文字资源为例学习四大请求方式</h1><span id="more"></span><p>GET:从服务器取出资源（一项或多项）<br>POST:在服务器新建一个资源<br>PUT:在服务器更新资源（客户端提供完整资源数据)<br>PATCH:在服务器更新资源(客户端提供需要修改的资源数据)<br>DELETE:从服务器删除资源</p><blockquote><p>好像是五大请求方式… 不过没有用到PATCH</p></blockquote><ul><li>以文字资源为例  分别<strong>对应增删改查</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">请求方式     请求内容             说明<br>GET/articles 文章列表<br>GET /articles/:id 文章详情<br>POST /articles 添加文章<br>PUT /articles/:id 修改某一篇文章<br>DELETE /articles/:id删除某一篇文章<br></code></pre></td></tr></table></figure><hr><h2 id="导入相应的包"><a href="#导入相应的包" class="headerlink" title="导入相应的包"></a>导入相应的包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br></code></pre></td></tr></table></figure><hr><h2 id="自定义需要的结构体"><a href="#自定义需要的结构体" class="headerlink" title="自定义需要的结构体"></a>自定义需要的结构体</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ArticleModel 文章格式  简单写</span><br><span class="hljs-keyword">type</span> ArticleModel <span class="hljs-keyword">struct</span> &#123;<br>Title   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;title&quot;`</span><br>Content <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;content&quot;`</span><br>&#125;<br><br><span class="hljs-comment">// 封装响应格式</span><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;<br>Code    <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;code&quot;`</span><br>Date    any    <span class="hljs-string">`json:&quot;date&quot;`</span><br>Message <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;msg&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">getList</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br>list := []ArticleModel&#123;<br>&#123;<span class="hljs-string">&quot;go语言入门&quot;</span>, <span class="hljs-string">&quot;本书是go语言入门基础&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;c语言入门到入土&quot;</span>, <span class="hljs-string">&quot;本书是c语言入门教程,面向入土&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;数据库从删库到跑路&quot;</span>, <span class="hljs-string">&quot;本书教你如何从删库到跑路&quot;</span>&#125;,<br>&#125;<br><span class="hljs-comment">// 返回的Response的code是随便写的，实际应该定义一些有意义的响应码</span><br>arg.JSON(<span class="hljs-number">200</span>, Response&#123;http.StatusOK, list, <span class="hljs-string">&quot;响应成功&quot;</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>postman响应截图：<br><img src="https://s2.loli.net/2023/08/03/dRHYulPCcNWgEs7.png" alt="文章列表"></li></ul><hr><h2 id="文章详情"><a href="#文章详情" class="headerlink" title="文章详情"></a>文章详情</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">getDetails</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 简写 实际应根据获取的id到数据库中查询</span><br>book_id := arg.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;获取到id: %v\n&quot;</span>, book_id)<br><span class="hljs-comment">// 此处直接得到查询数据库的结果</span><br>article := ArticleModel&#123;<br><span class="hljs-string">&quot;c语言入门到入土&quot;</span>, <span class="hljs-string">&quot;本书是c语言入门教程,面向入土&quot;</span>,<br>&#125;<br><br>arg.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;id&quot;</span>: book_id, <span class="hljs-string">&quot;response&quot;</span>: Response&#123;http.StatusOK, article, <span class="hljs-string">&quot;响应成功&quot;</span>&#125;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>postman响应截图：<br><img src="https://s2.loli.net/2023/08/03/dRHYulPCcNWgEs7.png" alt="文章详情"></li></ul><hr><h2 id="创建文章-和-修改文章"><a href="#创建文章-和-修改文章" class="headerlink" title="创建文章 和 修改文章"></a>创建文章 和 修改文章</h2><blockquote><p>这俩放一起了，因为用到同一个函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 封装的一个处理json数据的函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">bindJson</span><span class="hljs-params">(arg *gin.Context, obj any)</span></span> (err <span class="hljs-type">error</span>) &#123;<br>body, _ := arg.GetRawData() <span class="hljs-comment">// 获取到post传的数据</span><br><br>contentType := arg.GetHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>)<br><br>fmt.Println(<span class="hljs-type">string</span>(contentType)) <span class="hljs-comment">// 内容类型</span><br><span class="hljs-comment">// 类型 对应的结果</span><br><span class="hljs-comment">// json:application/json</span><br><span class="hljs-comment">// from-data: multipart/form-data; boundary=--------------------------629880651178044255286053</span><br><span class="hljs-comment">// x-www-form-urlencoded:application/x-www-form-urlencoded</span><br><br><span class="hljs-comment">// 根据以上可以这也判断并解析json数据  不同类型的数据用不同的处理方式</span><br><span class="hljs-keyword">switch</span> contentType &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;application/json&quot;</span>: <span class="hljs-comment">// 简写，这里就只解析json数据</span><br><br><span class="hljs-comment">// 将post的数据反序列化解析成结构体</span><br>err := json.Unmarshal(body, &amp;obj)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;:D&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 创建文章</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">post</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> article ArticleModel<br><br>err := _bindJson(arg, &amp;article)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>arg.JSON(http.StatusOK, Response&#123;http.StatusOK, article, <span class="hljs-string">&quot;创建成功&quot;</span>&#125;)<br>&#125;<br><br><span class="hljs-comment">// 修改文章</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">put</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 拿到id</span><br>fmt.Printf(<span class="hljs-string">&quot;获取到id: %v\n&quot;</span>, arg.Param(<span class="hljs-string">&quot;id&quot;</span>))<br><br><span class="hljs-keyword">var</span> article ArticleModel<br><span class="hljs-comment">// 拿到修改后的文章内容</span><br>err := _bindJson(arg, &amp;article)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>arg.JSON(<span class="hljs-number">200</span>, Response&#123;http.StatusOK, article, <span class="hljs-string">&quot;修改成功&quot;</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>postman响应截图：</p></li><li><p>创建文章<br><img src="https://s2.loli.net/2023/08/03/s8zIogb6QUX7Cy4.png" alt="创建文章"></p></li><li><p>修改文章</p></li><li><p><img src="https://s2.loli.net/2023/08/03/qhCy6NfoR2KBDGJ.png" alt="修改文章"></p></li></ul><hr><h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">delete</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 拿到id</span><br>fmt.Printf(<span class="hljs-string">&quot;获取到id: %v\n&quot;</span>, arg.Param(<span class="hljs-string">&quot;id&quot;</span>))<br><span class="hljs-comment">// 实际中 拿到id然后去数据库中查找、删除 ...</span><br><br>arg.JSON(<span class="hljs-number">200</span>, Response&#123;http.StatusOK, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;删除成功&quot;</span>&#125;)<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>postman响应截图：</li><li>删除文章<br><img src="https://s2.loli.net/2023/08/03/K9gy6LCsJivmb4N.png" alt="删除文章"></li></ul><blockquote><p>删除后只需要返回一个删除成功的提示，没别的东西，所以很空，&#x3D;&#x3D;实际开发还需要对数据库进行操作…&#x3D;&#x3D;</p></blockquote><hr><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br>router.GET(<span class="hljs-string">&quot;/articles/&quot;</span>, _getList)<br>router.GET(<span class="hljs-string">&quot;/articles/:id&quot;</span>, _getDetails)<br>router.POST(<span class="hljs-string">&quot;/articles/&quot;</span>, _post)<br>router.PUT(<span class="hljs-string">&quot;/articles/:id&quot;</span>, _put)<br>router.DELETE(<span class="hljs-string">&quot;/articles/:id&quot;</span>, _delete)<br><br>err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>在写这篇博客的时候很晚了，我听到楼下几个少年大声唱着《海阔天空》。暑假里，几个好朋友一起喝，喝到很晚回家路上一路高歌，放肆的享受着年轻的自己…… </p><p>我应该也有这样放飞自我的时候，但是已经记不太清了。我把这事告诉朋友。他说，给他一笔钱他也海阔天空🤣🤣 </p><p><strong>over~</strong> </p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>gin</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>此页作为测试页</title>
    <link href="/2023/07/26/test/"/>
    <url>/2023/07/26/test/</url>
    
    <content type="html"><![CDATA[<p>碎碎念…</p><span id="more"></span><p>现在好多地方还比较简陋，先记下来：</p><ul><li><del>首页的文字设为显示封面更好，显示一大段文字看着难受</del></li><li><del>代码框的样式得换掉，太丑了，想换成mac主题的</del></li><li><del>我需要一个临时的，私密的发布页…</del></li><li>一些封面图还没有改，主要是没有合适的图了🤣</li><li>gitalk 原来也不能让未登录用户评论啊，还以为可以呢…</li><li>要给一些文章加上锁，可是在文章前面添加字段也没用😥</li></ul><p>先这样，等我慢慢改吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/19/hello-world/"/>
    <url>/2023/07/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
