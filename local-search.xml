<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gin学习记录 2</title>
    <link href="/2023/08/05/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-2/"/>
    <url>/2023/08/05/gin%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-2/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h2><p>当校验错误时，根据返回的错误信息自定义一个错误提示返回给前端页面，方便处理。</p><span id="more"></span><hr><h3 id="定义需要用到的结构体"><a href="#定义需要用到的结构体" class="headerlink" title="定义需要用到的结构体"></a>定义需要用到的结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SignUserInfo <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// 添加验证器 常用的</span><br>Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; binding:&quot;required&quot; msg:&quot;昵称不能为空&quot;`</span>    <span class="hljs-comment">// 用户名</span><br>Age  <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot; binding:&quot;lt=100,gt=0&quot; msg:&quot;年龄不符合要求&quot;`</span> <span class="hljs-comment">// 年龄</span><br>&#125;   <br></code></pre></td></tr></table></figure><hr><h3 id="封装成独立的函数"><a href="#封装成独立的函数" class="headerlink" title="封装成独立的函数"></a>封装成独立的函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetValidMsg</span><span class="hljs-params">(err <span class="hljs-type">error</span>, user SignUserInfo)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// 将err接口断言为具体类型</span><br><span class="hljs-keyword">if</span> errs, ok := err.(validator.ValidationErrors); ok &#123;<br>getObj := reflect.TypeOf(&amp;user)<br>fmt.Println(<span class="hljs-string">&quot;类型为：&quot;</span>, getObj)<br><br><span class="hljs-comment">// 断言成功</span><br><span class="hljs-keyword">for</span> _, e := <span class="hljs-keyword">range</span> errs &#123; <span class="hljs-comment">// 遍历每一个错误信息 报错信息可能有多个</span><br><span class="hljs-comment">// 根据报错字段名，获取结构体的具体字段</span><br><span class="hljs-keyword">if</span> f, exits := getObj.Elem().FieldByName(e.Field()); exits &#123;<br>msg := f.Tag.Get(<span class="hljs-string">&quot;msg&quot;</span>)<br>fmt.Println(msg)<br><span class="hljs-keyword">return</span> msg<br>&#125; f f, exits := getObj.Elem().FieldByName(e.Field()); exits &#123;<br>msg := f.Tag.Get(<span class="hljs-string">&quot;msg&quot;</span>)<br>fmt.Println(msg)<br><span class="hljs-keyword">return</span> msg<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 没有检查到验证器错误则返回空</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>validator.ValidationErrors</code> 是一个错误类型，用于存储验证器验证失败的错误信息 <code>err.(validator.ValidationErrors)</code> 表示<br>将 <code>err</code> 转换为 <code>validator.ValidationErrors</code> 类型。如果 <code>err</code> 是 <code>validator.ValidationErrors</code> 类型或者它的指针类型，则类型断言会返回转换后的 <code>validator.ValidationErrors</code>类型的值和 <code>true</code>。如果 <code>err</code> 不是 <code>validator.ValidationErrors</code>类型或者它的指针类型，则类型断言会返回 <code>validator.ValidationErrors</code>类型的零值和 <code>false</code>。 </p><p>通过 <code>getObj.Elem()</code> 获取结构体的元素类型，因为 <code>getObj</code> 是结构体指针类型的反射对象，<br>使用 <code>Elem()</code> 方法可以获取指针指向的实际结构体类型。<br>然后，使用 <code>FieldByName()</code> 方法根据错误字段名 <code>e.Field()</code> 查找结构体中对应的字段。<br>如果字段存在， <code>f</code> 就是一个包含该字段信息的反射对象，并且 <code>exits</code> 为 <code>true</code> 。如果字段不存在，<br><code>f</code> 将是零值的反射对象，并且 <code>exits</code> 为 <code>false</code> 。</p><hr><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br><br>router.POST(<span class="hljs-string">&quot;/check&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;访问...&quot;</span>)<br><span class="hljs-keyword">var</span> user SignUserInfo<br>err := c.ShouldBindJSON(&amp;user) <span class="hljs-comment">// 返回error信息，不报错则返回空</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><br>customErr := GetValidMsg(err, user) <span class="hljs-comment">// 自定义的错误信息</span><br><br>c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: customErr&#125;)<br><br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;data&quot;</span>: user&#125;)<br>&#125;)<br><br>err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>截图如下：<br><img src="https://s2.loli.net/2023/08/05/RMEKjNrvoHPy1kf.png" alt="校验失败返回自定义的错误信息"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>学习这一节的时候看不懂，看源码也看不明白，这个时候最可靠的就是chatGPT了，全部代码复制粘贴发给他，然后让他一个函数一个函数解释，真是太棒了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>gin</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gin-学习记录-1</title>
    <link href="/2023/08/04/gin-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/"/>
    <url>/2023/08/04/gin-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><img src="https://s2.loli.net/2023/08/04/8BK3UqZutdebsgR.png" alt="辉夜酱"></p><h1 id="以文字资源为例学习四大请求方式"><a href="#以文字资源为例学习四大请求方式" class="headerlink" title="以文字资源为例学习四大请求方式"></a>以文字资源为例学习四大请求方式</h1><span id="more"></span><p>GET:从服务器取出资源（一项或多项）<br>POST:在服务器新建一个资源<br>PUT:在服务器更新资源（客户端提供完整资源数据)<br>PATCH:在服务器更新资源(客户端提供需要修改的资源数据)<br>DELETE:从服务器删除资源</p><blockquote><p>好像是五大请求方式… 不过没有用到PATCH</p></blockquote><ul><li>以文字资源为例  分别<strong>对应增删改查</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">// 请求方式   请求内容             说明<br>// GET/articles 文章列表<br>// GET /articles/:id 文章详情<br>// POST /articles 添加文章<br>// PUT /articles/:id 修改某一篇文章<br>// DELETE /articles/:id删除某一篇文章<br></code></pre></td></tr></table></figure><hr><h2 id="导入相应的包"><a href="#导入相应的包" class="headerlink" title="导入相应的包"></a>导入相应的包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br></code></pre></td></tr></table></figure><hr><h2 id="自定义需要的结构体"><a href="#自定义需要的结构体" class="headerlink" title="自定义需要的结构体"></a>自定义需要的结构体</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ArticleModel 文章格式  简单写</span><br><span class="hljs-keyword">type</span> ArticleModel <span class="hljs-keyword">struct</span> &#123;<br>Title   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;title&quot;`</span><br>Content <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;content&quot;`</span><br>&#125;<br><br><span class="hljs-comment">// 封装响应格式</span><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">struct</span> &#123;<br>Code    <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;code&quot;`</span><br>Date    any    <span class="hljs-string">`json:&quot;date&quot;`</span><br>Message <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;msg&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="文章列表"><a href="#文章列表" class="headerlink" title="文章列表"></a>文章列表</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">getList</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br>list := []ArticleModel&#123;<br>&#123;<span class="hljs-string">&quot;go语言入门&quot;</span>, <span class="hljs-string">&quot;本书是go语言入门基础&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;c语言入门到入土&quot;</span>, <span class="hljs-string">&quot;本书是c语言入门教程,面向入土&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;数据库从删库到跑路&quot;</span>, <span class="hljs-string">&quot;本书教你如何从删库到跑路&quot;</span>&#125;,<br>&#125;<br><span class="hljs-comment">// 返回的Response的code是随便写的，实际应该定义一些有意义的响应码</span><br>arg.JSON(<span class="hljs-number">200</span>, Response&#123;http.StatusOK, list, <span class="hljs-string">&quot;响应成功&quot;</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>postman响应截图：<br><img src="https://s2.loli.net/2023/08/03/dRHYulPCcNWgEs7.png" alt="文章列表"></li></ul><hr><h2 id="文章详情"><a href="#文章详情" class="headerlink" title="文章详情"></a>文章详情</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">getDetails</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 简写 实际应根据获取的id到数据库中查询</span><br>book_id := arg.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;获取到id: %v\n&quot;</span>, book_id)<br><span class="hljs-comment">// 此处直接得到查询数据库的结果</span><br>article := ArticleModel&#123;<br><span class="hljs-string">&quot;c语言入门到入土&quot;</span>, <span class="hljs-string">&quot;本书是c语言入门教程,面向入土&quot;</span>,<br>&#125;<br><br>arg.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;id&quot;</span>: book_id, <span class="hljs-string">&quot;response&quot;</span>: Response&#123;http.StatusOK, article, <span class="hljs-string">&quot;响应成功&quot;</span>&#125;&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>postman响应截图：<br><img src="https://s2.loli.net/2023/08/03/dRHYulPCcNWgEs7.png" alt="文章详情"></li></ul><hr><h2 id="创建文章-和-修改文章"><a href="#创建文章-和-修改文章" class="headerlink" title="创建文章 和 修改文章"></a>创建文章 和 修改文章</h2><blockquote><p>这俩放一起了，因为用到同一个函数</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 封装的一个处理json数据的函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">bindJson</span><span class="hljs-params">(arg *gin.Context, obj any)</span></span> (err <span class="hljs-type">error</span>) &#123;<br>body, _ := arg.GetRawData() <span class="hljs-comment">// 获取到post传的数据</span><br><br>contentType := arg.GetHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>)<br><br>fmt.Println(<span class="hljs-type">string</span>(contentType)) <span class="hljs-comment">// 内容类型</span><br><span class="hljs-comment">// 类型 对应的结果</span><br><span class="hljs-comment">// json:application/json</span><br><span class="hljs-comment">// from-data: multipart/form-data; boundary=--------------------------629880651178044255286053</span><br><span class="hljs-comment">// x-www-form-urlencoded:application/x-www-form-urlencoded</span><br><br><span class="hljs-comment">// 根据以上可以这也判断并解析json数据  不同类型的数据用不同的处理方式</span><br><span class="hljs-keyword">switch</span> contentType &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;application/json&quot;</span>: <span class="hljs-comment">// 简写，这里就只解析json数据</span><br><br><span class="hljs-comment">// 将post的数据反序列化解析成结构体</span><br>err := json.Unmarshal(body, &amp;obj)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;:D&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 创建文章</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">post</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> article ArticleModel<br><br>err := _bindJson(arg, &amp;article)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>arg.JSON(http.StatusOK, Response&#123;http.StatusOK, article, <span class="hljs-string">&quot;创建成功&quot;</span>&#125;)<br>&#125;<br><br><span class="hljs-comment">// 修改文章</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">put</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 拿到id</span><br>fmt.Printf(<span class="hljs-string">&quot;获取到id: %v\n&quot;</span>, arg.Param(<span class="hljs-string">&quot;id&quot;</span>))<br><br><span class="hljs-keyword">var</span> article ArticleModel<br><span class="hljs-comment">// 拿到修改后的文章内容</span><br>err := _bindJson(arg, &amp;article)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>arg.JSON(<span class="hljs-number">200</span>, Response&#123;http.StatusOK, article, <span class="hljs-string">&quot;修改成功&quot;</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>postman响应截图：</p></li><li><p>创建文章<br><img src="https://s2.loli.net/2023/08/03/s8zIogb6QUX7Cy4.png" alt="创建文章"></p></li><li><p>修改文章</p></li><li><p><img src="https://s2.loli.net/2023/08/03/qhCy6NfoR2KBDGJ.png" alt="修改文章"></p></li></ul><hr><h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> _<span class="hljs-title">delete</span><span class="hljs-params">(arg *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 拿到id</span><br>fmt.Printf(<span class="hljs-string">&quot;获取到id: %v\n&quot;</span>, arg.Param(<span class="hljs-string">&quot;id&quot;</span>))<br><span class="hljs-comment">// 实际中 拿到id然后去数据库中查找、删除 ...</span><br><br>arg.JSON(<span class="hljs-number">200</span>, Response&#123;http.StatusOK, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;删除成功&quot;</span>&#125;)<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>postman响应截图：</li><li>删除文章<br><img src="https://s2.loli.net/2023/08/03/K9gy6LCsJivmb4N.png" alt="删除文章"></li></ul><blockquote><p>删除后只需要返回一个删除成功的提示，没别的东西，所以很空，&#x3D;&#x3D;实际开发还需要对数据库进行操作…&#x3D;&#x3D;</p></blockquote><hr><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br>router.GET(<span class="hljs-string">&quot;/articles/&quot;</span>, _getList)<br>router.GET(<span class="hljs-string">&quot;/articles/:id&quot;</span>, _getDetails)<br>router.POST(<span class="hljs-string">&quot;/articles/&quot;</span>, _post)<br>router.PUT(<span class="hljs-string">&quot;/articles/:id&quot;</span>, _put)<br>router.DELETE(<span class="hljs-string">&quot;/articles/:id&quot;</span>, _delete)<br><br>err := router.Run(<span class="hljs-string">&quot;:80&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>在写这篇博客的时候很晚了，我听到楼下几个少年大声唱着《海阔天空》。暑假里，几个好朋友一起喝，喝到很晚回家路上一路高歌，放肆的享受着年轻的自己…… </p><p>我应该也有这样放飞自我的时候，但是已经记不太清了。我把这事告诉朋友。他说，给他一笔钱他也海阔天空🤣🤣 </p><p><strong>over~</strong> </p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>gin</tag>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/07/26/test/"/>
    <url>/2023/07/26/test/</url>
    
    <content type="html"><![CDATA[<p>现在好多地方还比较简陋，先记下来：</p><ul><li>首页的文字设为显示封面更好，显示一大段文字看着难受</li><li>代码框的样式得换掉，太丑了，想换成mac主题的</li><li>我需要一个临时的，私密的发布页…</li></ul><p>先这样，等我慢慢改吧</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/19/hello-world/"/>
    <url>/2023/07/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
